;; MathSAT API call trace
;; generated on Mon Oct 10 14:21:33 2016
(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")

(reset-assertions)
(declare-fun autoname_1 () (_ BitVec 1))
(declare-fun autoname_2 () (_ BitVec 1))
(declare-fun autoname_3 () (_ BitVec 1))
(declare-fun autoname_4 () (_ BitVec 1))
(declare-fun count_0_0 () (_ BitVec 32))
(declare-fun gamma_0_0 () (_ BitVec 32))
(declare-fun gamma_0_1 () (_ BitVec 32))
(declare-fun max_0_0 () (_ BitVec 32))
(declare-fun nloss_0_0 () (_ BitVec 1))
(declare-fun nloss_0_1 () (_ BitVec 1))
(declare-fun reset_0_1 () (_ BitVec 1))
(declare-fun scan_0_0 () (_ BitVec 32))
(declare-fun start_0_1 () (_ BitVec 1))
(define-fun $e1 () Bool (= reset_0_1 #b1))
(define-fun $e2 () Bool (= gamma_0_0 #b00000000000000000000000000000000))
(define-fun $e3 () Bool (= gamma_0_1 #b00000000000000000000000000000001))
(define-fun $e4 () Bool (= gamma_0_0 #b00000000000000000000000000000001))
(define-fun $e5 () Bool (= gamma_0_1 #b00000000000000000000000000000010))
(define-fun $e6 () Bool (= gamma_0_0 #b00000000000000000000000000000010))
(define-fun $e7 () Bool (= gamma_0_1 #b00000000000000000000000000000011))
(define-fun $e8 () Bool (= gamma_0_0 #b00000000000000000000000000000011))
(define-fun $e9 () Bool (= gamma_0_0 #b00000000000000000000000000000100))
(define-fun $e10 () Bool (= gamma_0_0 #b00000000000000000000000000000101))
(define-fun $e11 () Bool (= gamma_0_1 #b00000000000000000000000000000110))
(define-fun $e12 () Bool (= gamma_0_0 #b00000000000000000000000000000110))
(define-fun $e13 () Bool (= count_0_0 #b00000000000000000000000000000000))
(define-fun $e14 () Bool (= gamma_0_1 #b00000000000000000000000000000111))
(define-fun $e15 () Bool (= gamma_0_0 #b00000000000000000000000000000111))
(define-fun $e16 () Bool (= scan_0_0 max_0_0))
(define-fun $e17 () Bool (= gamma_0_1 #b00000000000000000000000000001000))
(define-fun $e18 () Bool (= gamma_0_0 #b00000000000000000000000000001000))
(define-fun $e19 () Bool (= gamma_0_0 #b00000000000000000000000000001001))
(define-fun $e20 () Bool (= gamma_0_0 #b00000000000000000000000000010000))
(define-fun $e21 () Bool (= gamma_0_1 #b00000000000000000000000000010111))
(define-fun $e22 () Bool (= autoname_1 #b1))
(define-fun $e23 () Bool (= gamma_0_1 #b00000000000000000000000000100000))
(define-fun $e24 () Bool (= autoname_2 #b1))
(define-fun $e25 () Bool (= autoname_3 #b1))
(define-fun $e26 () Bool (= autoname_4 #b1))
(define-fun $e27 () Bool (= gamma_0_1 #b00000000000000000000000000010010))
(define-fun $e28 () Bool (= gamma_0_1 #b00000000000000000000000000010011))
(define-fun $e29 () Bool (= gamma_0_1 #b00000000000000000000000000100100))
(define-fun $e30 () Bool (= gamma_0_1 #b00000000000000000000000000010101))
(define-fun $e31 () Bool (= gamma_0_1 #b00000000000000000000000000010110))
(define-fun $e32 () Bool (= gamma_0_1 #b00000000000000000000000000100001))
(define-fun $e33 () Bool (= gamma_0_1 #b00000000000000000000000000100010))
(define-fun $e34 () Bool (= gamma_0_1 #b00000000000000000000000000100011))
(define-fun $e35 () Bool (= gamma_0_1 #b00000000000000000000000000100101))
(define-fun $e36 () Bool (= nloss_0_1 #b0))
(define-fun $e37 () Bool (= nloss_0_1 nloss_0_0))
(define-fun $e38 () Bool (= nloss_0_1 #b1))
(define-fun .f1 () Bool  (ite $e1 $e36 (ite $e2 $e37 (ite $e4 $e36 (ite $e6 $e37 (ite $e8 $e37 (ite $e9 $e37 (ite $e10 $e37 (ite $e12 $e37 (ite $e15 $e37 (ite $e18 $e37 (ite $e19 $e37 (ite $e20 (ite $e13 $e38 (ite $e22 $e38 (ite $e24 $e38 (ite $e25 $e38 (ite $e26 $e38 $e37))))) $e37)))))))))))))
(define-fun .f2 () Bool  (ite $e1 (= gamma_0_1 #b00000000000000000000000000000000) (ite $e2 $e3 (ite $e4 $e5 (ite $e6 $e7 (ite $e8 (= gamma_0_1 #b00000000000000000000000000000100) (ite $e9 (= gamma_0_1 #b00000000000000000000000000000101) (ite $e10 $e11 (ite $e12 (ite $e13 $e14 $e11) (ite $e15 (ite $e13 (ite $e16 $e7 $e17) $e14) (ite $e18 (= gamma_0_1 #b00000000000000000000000000001001) (ite $e19 $e3 (ite $e20 (ite $e13 $e21 (ite $e22 $e23 (ite $e24 $e23 (ite $e25 $e23 (ite $e26 $e23 (= gamma_0_1 #b00000000000000000000000000010000)))))) (ite (= gamma_0_0 #b00000000000000000000000000010001) $e27 (ite (= gamma_0_0 #b00000000000000000000000000010010) (ite $e13 $e28 $e27) (ite (= gamma_0_0 #b00000000000000000000000000010011) (ite $e13 (ite $e16 $e17 (ite (= max_0_0 #b00000000000000000000000000000000) $e5 $e29)) $e28) (ite (= gamma_0_0 #b00000000000000000000000000010100) $e30 (ite (= gamma_0_0 #b00000000000000000000000000010101) (ite $e13 $e31 $e30) (ite (= gamma_0_0 #b00000000000000000000000000010110) (ite $e13 $e21 $e31) (ite (= gamma_0_0 #b00000000000000000000000000010111) (= gamma_0_1 #b00000000000000000000000000011000) (ite (= gamma_0_0 #b00000000000000000000000000011000) (= gamma_0_1 #b00000000000000000000000000011001) (ite (= gamma_0_0 #b00000000000000000000000000011001) $e23 (ite (= gamma_0_0 #b00000000000000000000000000100000) (ite $e13 $e32 $e23) (ite (= gamma_0_0 #b00000000000000000000000000100001) (ite $e13 (ite (= max_0_0 scan_0_0) $e21 $e33) $e32) (ite (= gamma_0_0 #b00000000000000000000000000100010) (ite $e13 $e34 $e33) (ite (= gamma_0_0 #b00000000000000000000000000100011) (ite $e13 $e33 $e34) (ite (= gamma_0_0 #b00000000000000000000000000100100) (ite $e13 $e35 $e29) (ite (= gamma_0_0 #b00000000000000000000000000100101) (ite $e13 $e29 $e35) (ite (= start_0_1 #b1) $e3 (= gamma_0_1 gamma_0_0))))))))))))))))))))))))))))))
(assert (! .f1 :interpolation-group .g0))
(assert (! .f2 :interpolation-group .g0))


(define-fun $f1 () Bool (= (bvadd nloss_0_0 nloss_0_1) #b0))
(define-fun $f2 () Bool (= gamma_0_1 #b00000000000000000000000000000001))
(define-fun $f3 () Bool (= gamma_0_0 #b00000000000000000000000000000000))
(define-fun $f4 () Bool (= reset_0_1 #b1))
(define-fun $f5 () Bool (= gamma_0_0 #b00000000000000000000000000001001))
(define-fun $f6 () Bool (= gamma_0_0 #b00000000000000000000000000000111))
(define-fun $f7 () Bool (= gamma_0_0 #b00000000000000000000000000000110))
(define-fun $f8 () Bool (= gamma_0_0 #b00000000000000000000000000000011))
(define-fun $f9 () Bool (= gamma_0_0 #b00000000000000000000000000000100))
(define-fun $f10 () Bool (= gamma_0_0 #b00000000000000000000000000000001))
(define-fun $f11 () Bool (= gamma_0_0 #b00000000000000000000000000001000))
(define-fun $f12 () Bool (= gamma_0_0 #b00000000000000000000000000000101))
(define-fun $f13 () Bool (= gamma_0_0 #b00000000000000000000000000000010))
(define-fun $f14 () Bool (= gamma_0_1 #b00000000000000000000000000000010))
(define-fun $f15 () Bool (= nloss_0_1 #b0))
(define-fun $f16 () Bool (= start_0_1 #b1))
(define-fun $f17 () Bool (= gamma_0_0 #b00000000000000000000000000010001))
(define-fun $f18 () Bool (= gamma_0_0 #b00000000000000000000000000010000))
(define-fun $f19 () Bool (= gamma_0_0 #b00000000000000000000000000010111))
(define-fun $f20 () Bool (= gamma_0_0 #b00000000000000000000000000011000))
(define-fun $f21 () Bool (= gamma_0_0 #b00000000000000000000000000010101))
(define-fun $f22 () Bool (= gamma_0_0 #b00000000000000000000000000010110))
(define-fun $f23 () Bool (= gamma_0_0 #b00000000000000000000000000011001))
(define-fun $f24 () Bool (= gamma_0_0 #b00000000000000000000000000100000))
(define-fun $f25 () Bool (= gamma_0_0 #b00000000000000000000000000010011))
(define-fun $f26 () Bool (= gamma_0_0 #b00000000000000000000000000100011))
(define-fun $f27 () Bool (= gamma_0_0 #b00000000000000000000000000100100))
(define-fun $f28 () Bool (= gamma_0_0 #b00000000000000000000000000100101))
(define-fun $f29 () Bool (= gamma_0_0 #b00000000000000000000000000010100))
(define-fun $f30 () Bool (= gamma_0_0 #b00000000000000000000000000100001))
(define-fun $f31 () Bool (= gamma_0_0 #b00000000000000000000000000100010))
(define-fun $f32 () Bool (= gamma_0_0 #b00000000000000000000000000010010))
(define-fun $f33 () Bool (= gamma_0_1 #b00000000000000000000000000010101))
(define-fun $f34 () Bool (= gamma_0_1 #b00000000000000000000000000100101))
(define-fun $f35 () Bool (= gamma_0_1 #b00000000000000000000000000100001))
(define-fun $f36 () Bool (= gamma_0_1 #b00000000000000000000000000100010))
(define-fun $f37 () Bool (= gamma_0_1 #b00000000000000000000000000100011))
(define-fun $f38 () Bool (= gamma_0_1 #b00000000000000000000000000000011))
(define-fun $f39 () Bool (= gamma_0_1 #b00000000000000000000000000010110))
(define-fun $f40 () Bool (= gamma_0_1 #b00000000000000000000000000000110))
(define-fun $f41 () Bool (= gamma_0_1 #b00000000000000000000000000010111))
(define-fun $f42 () Bool (= gamma_0_1 #b00000000000000000000000000000111))
(define-fun $f43 () Bool (= gamma_0_1 #b00000000000000000000000000010010))
(define-fun $f44 () Bool (= gamma_0_1 #b00000000000000000000000000100000))
(define-fun $f45 () Bool (= gamma_0_1 #b00000000000000000000000000100100))
(define-fun $f46 () Bool (= gamma_0_1 #b00000000000000000000000000010011))
(define-fun $f47 () Bool (= autoname_2 #b1))
(define-fun $f48 () Bool (= autoname_3 #b1))
(define-fun $f49 () Bool (= autoname_1 #b1))
(define-fun $f50 () Bool (= autoname_4 #b1))
(define-fun $f51 () Bool (= gamma_0_1 #b00000000000000000000000000001000))
(define-fun $f52 () Bool (and $f44 $f18))
(define-fun $f53 () Bool (= nloss_0_1 #b1))
(define-fun .f3 () Bool (not (not (and (not (and $f2 $f1 $f3 (not $f4))) (not (and $f1 $f5 $f2 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13))) (not (and $f10 $f14 $f15 (not $f4) (not $f3))) (not (and $f1 $f16 $f2 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f27) (not $f28) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and $f25 $f14 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f32))) (not (and (not $f4) $f1 (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f27) (not $f28) (not $f29) (not $f30) (not $f31) (not $f32) (not $f16) (= (bvadd (bvmul #b11111111111111111111111111111111 gamma_0_0) gamma_0_1) #b00000000000000000000000000000000))) (not (and (= gamma_0_1 #b00000000000000000000000000011001) $f20 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f21) (not $f22) (not $f25) (not $f29) (not $f32))) (not (and (= gamma_0_1 #b00000000000000000000000000001001) $f11 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f33 $f29 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f25) (not $f32))) (not (and $f21 $f33 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f25) (not $f29) (not $f32))) (not (and $f34 $f27 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and $f30 $f35 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f32))) (not (and $f35 $f24 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f25) (not $f29) (not $f32))) (not (and $f36 $f30 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f32))) (not (and $f37 $f31 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f30) (not $f32))) (not (and $f1 $f38 $f13 (not $f4) (not $f3) (not $f10))) (not (and $f22 $f39 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f21) (not $f25) (not $f29) (not $f32))) (not (and $f40 $f12 $f1 (not $f4) (not $f3) (not $f8) (not $f9) (not $f10) (not $f13))) (not (and $f26 $f36 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and (= gamma_0_1 #b00000000000000000000000000011000) $f19 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f21) (not $f22) (not $f25) (not $f29) (not $f32))) (not (and $f26 $f37 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and $f31 $f36 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f30) (not $f32))) (not (and $f22 $f41 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f21) (not $f25) (not $f29) (not $f32))) (not (and $f6 $f42 $f1 (not $f4) (not $f3) (not $f7) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f7 $f40 $f1 (not $f4) (not $f3) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f43 $f17 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f18) (not $f5))) (not (and $f23 $f44 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f25) (not $f29) (not $f32))) (not (and $f24 $f44 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f25) (not $f29) (not $f32))) (not (and $f32 $f43 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5))) (not (and $f28 $f45 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f27) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and $f30 $f41 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f29) (not $f32))) (not (and $f27 $f45 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and (= gamma_0_1 #b00000000000000000000000000000101) $f9 $f1 (not $f4) (not $f3) (not $f8) (not $f10) (not $f13))) (not (and $f46 $f32 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5))) (not (and (= gamma_0_1 #b00000000000000000000000000010000) $f18 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5) (not $f47) (not $f48) (not $f49) (not $f50))) (not (and $f45 $f25 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f32))) (not (and $f42 $f7 $f1 (not $f4) (not $f3) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f6 $f38 $f1 (not $f4) (not $f3) (not $f7) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f25 $f46 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f32))) (not (and $f28 $f34 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f19) (not $f20) (not $f21) (not $f22) (not $f23) (not $f24) (not $f25) (not $f26) (not $f27) (not $f29) (not $f30) (not $f31) (not $f32))) (not (and $f39 $f21 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f25) (not $f29) (not $f32))) (not (and (= gamma_0_1 #b00000000000000000000000000000100) $f8 $f1 (not $f4) (not $f3) (not $f10) (not $f13))) (not (and $f51 $f6 $f1 (not $f4) (not $f3) (not $f7) (not $f8) (not $f9) (not $f10) (not $f12) (not $f13))) (not (and $f47 $f52 $f53 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5) (not $f49))) (not (and $f50 $f52 $f53 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5) (not $f47) (not $f48) (not $f49))) (not (and $f49 $f18 $f44 $f53 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5))) (not (and $f25 $f51 $f1 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f17) (not $f18) (not $f5) (not $f32))) (not (and $f41 $f18 $f53 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5))) (not (and $f48 $f52 $f53 (not $f4) (not $f3) (not $f6) (not $f7) (not $f8) (not $f9) (not $f10) (not $f11) (not $f12) (not $f13) (not $f5) (not $f47) (not $f49))) (not (and $f15 $f4 (= gamma_0_1 #b00000000000000000000000000000000))) true))))
(assert (! .f3 :interpolation-group .g1))

(declare-fun next_gamma_0_0 () (_ BitVec 32))
(declare-fun next_gamma_0_1 () (_ BitVec 32))
(declare-fun next_scan_0_0 () (_ BitVec 32))

(define-fun .f7 () Bool (bvult next_scan_0_0 scan_0_0))
(define-fun .f8 () Bool (not (bvult gamma_0_1 next_gamma_0_1)))
(define-fun .f9 () Bool (bvult next_gamma_0_0 gamma_0_0))

(assert (! .f7 :interpolation-group .g1))
(assert (! .f8 :interpolation-group .g1))
(assert (! .f9 :interpolation-group .g1))


(check-sat)
(get-interpolant (.g0))
