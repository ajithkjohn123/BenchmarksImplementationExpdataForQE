;; MathSAT API call trace
;; generated on Mon Oct 10 14:21:33 2016
(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")

(reset-assertions)
(declare-fun clk_0 () (_ BitVec 1))
(declare-fun clk_1 () (_ BitVec 1))
(declare-fun data_in_1 () (_ BitVec 16))
(declare-fun fpga_alive_cnt_1 () (_ BitVec 16))
(declare-fun fpga_alive_dis_0 () (_ BitVec 1))
(declare-fun fpga_alive_dis_1 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_0 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_1 () (_ BitVec 1))
(declare-fun fpga_alive_reg_0 () (_ BitVec 16))
(declare-fun fpga_alive_reg_1 () (_ BitVec 16))
(declare-fun fpga_alive_reg_written_0 () (_ BitVec 1))
(declare-fun fpga_alive_reg_written_1 () (_ BitVec 1))
(declare-fun fpga_rst_0 () (_ BitVec 1))
(declare-fun fpga_rst_1 () (_ BitVec 1))
(declare-fun reset_0 () (_ BitVec 1))
(declare-fun reset_1 () (_ BitVec 1))
(declare-fun s_clk_cnt_0 () (_ BitVec 32))
(declare-fun s_clk_cnt_1 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_0 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_1 () (_ BitVec 32))
(declare-fun sel_fpga_alive_reg_1 () (_ BitVec 1))
(declare-fun sfpga_alive_0 () (_ BitVec 1))
(declare-fun sfpga_alive_1 () (_ BitVec 1))
(declare-fun state_fpga_alive_gen_pulse_0 () (_ BitVec 4))
(declare-fun state_fpga_alive_gen_pulse_1 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_0 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_1 () (_ BitVec 4))
(define-fun $e1 () Bool (= clk_1 clk_0))
(define-fun $e2 () Bool (and (= reset_1 reset_0) $e1))
(define-fun $e3 () Bool (= reset_1 #b1))
(define-fun $e4 () Bool (and (= clk_1 #b1) (not $e1)))
(define-fun $e5 () Bool (= fpga_rst_1 fpga_rst_0))
(define-fun $e6 () Bool (= state_fpga_alive_reg_1 #b0000))
(define-fun $e7 () Bool (= state_fpga_alive_reg_0 #b0000))
(define-fun $e8 () Bool (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_1)))
(define-fun $e9 () Bool (= sel_fpga_alive_reg_1 #b1))
(define-fun $e10 () Bool (= state_fpga_alive_reg_1 state_fpga_alive_reg_0))
(define-fun $e11 () Bool (= state_fpga_alive_reg_1 #b0010))
(define-fun $e12 () Bool (= fpga_alive_reg_1 fpga_alive_reg_0))
(define-fun $e13 () Bool (= fpga_alive_dis_1 fpga_alive_dis_1))
(define-fun $e14 () Bool (= fpga_alive_dis_1 #b0))
(define-fun $e15 () Bool (= sfpga_alive_1 #b1))
(define-fun $e16 () Bool (= fpga_alive_pulse_1 #b1))
(define-fun $e17 () Bool (= fpga_alive_pulse_1 #b0))
(define-fun $e18 () Bool (ite (and $e15 $e14) $e16 $e17))
(define-fun $e19 () Bool (= sfpga_alive_1 sfpga_alive_0))
(define-fun $e20 () Bool (= fpga_alive_reg_written_1 fpga_alive_reg_written_0))
(define-fun $e21 () Bool (= s_clk_cnt_1 #b00000000000000000000000000000000))
(define-fun $e22 () Bool (= state_fpga_alive_gen_pulse_0 #b0000))
(define-fun $e23 () Bool (= state_fpga_alive_gen_pulse_0 #b0001))
(define-fun $e24 () Bool (bvult #b00000000000000000001000100010001 s_clk_cnt_0))
(define-fun $e25 () Bool (= s_clk_cnt_1 s_clk_cnt_0))
(define-fun $e26 () Bool (= s_clk_cnt_default_1 #b00000000000000000000000000000000))
(define-fun $e27 () Bool (= s_clk_cnt_default_1 s_clk_cnt_default_0))
(define-fun $e28 () Bool (= state_fpga_alive_gen_pulse_0 #b0010))
(define-fun $e29 () Bool (bvult #b00000000000000010011100010000000 s_clk_cnt_default_0))
(define-fun $e30 () Bool (= state_fpga_alive_gen_pulse_1 #b0000))
(define-fun $e31 () Bool (= fpga_alive_reg_written_0 #b1))
(define-fun $e32 () Bool (= state_fpga_alive_gen_pulse_1 #b0001))
(define-fun $e33 () Bool (= state_fpga_alive_gen_pulse_1 #b0010))
(define-fun $e34 () Bool (= state_fpga_alive_gen_pulse_1 state_fpga_alive_gen_pulse_0))
(define-fun $e35 () Bool (= sfpga_alive_1 #b0))

(define-fun .f1 () Bool (ite (not $e2) (ite $e3 (= fpga_rst_1 #b0) (ite $e4 (= fpga_rst_1 #b1) $e5)) $e5))
(assert (! .f1 :interpolation-group .g0))


(define-fun .f2 () Bool (ite (not $e2) (ite $e3 (= fpga_alive_reg_1 #b0000000000000000) (ite $e4 (ite $e7 (ite $e8 (ite $e9 (= fpga_alive_reg_1 data_in_1) $e12) $e12) $e12) $e12)) $e12))
(assert (! .f2 :interpolation-group .g0))



(define-fun .f3 () Bool (ite (not $e2) (ite $e3 $e6 (ite $e4 (ite $e7 (ite $e8 (ite $e9 (= state_fpga_alive_reg_1 #b0001) $e10) $e10) (ite (= state_fpga_alive_reg_0 #b0001) $e11 (ite (= state_fpga_alive_reg_0 #b0010) $e11 $e6))) $e10)) $e10))
(assert (! .f3 :interpolation-group .g0))

(define-fun .f4 () Bool (= fpga_alive_cnt_1 fpga_alive_reg_1))
(assert (! .f4 :interpolation-group .g0))

(define-fun .f5 () Bool (ite (not $e2) (ite $e3 $e15 (ite $e4 (ite $e22 $e15 (ite $e23 (ite $e24 $e35 $e15) (ite $e28 (ite (not $e29) $e35 $e15) $e19))) $e19)) $e19))
(assert (! .f5 :interpolation-group .g0))

(define-fun .f6 () Bool (ite (not (and $e13 (= sfpga_alive_1 sfpga_alive_1))) $e18 (ite (not (and $e13 $e19)) $e18 (ite (not (and (= fpga_alive_dis_1 fpga_alive_dis_0) (= sfpga_alive_0 sfpga_alive_0))) (ite (and (= sfpga_alive_0 #b1) $e14) $e16 $e17) (= fpga_alive_pulse_1 fpga_alive_pulse_0)))))
(assert (! .f6 :interpolation-group .g0))

(define-fun .f7 () Bool (ite (not $e2) (ite $e3 $e30 (ite $e4 (ite $e22 (ite $e31 $e32 $e33) (ite $e23 $e32 (ite $e28 (ite (not $e29) $e33 (ite $e31 $e30 $e34)) $e30))) $e34)) $e34))
(assert (! .f7 :interpolation-group .g0))

(define-fun .f8 () Bool (ite (not $e2) (ite $e3 $e26 (ite $e4 (ite $e22 $e26 (ite $e23 $e27 (ite $e28 (ite (not $e29) $e26 (= s_clk_cnt_default_1 (bvadd s_clk_cnt_default_0 #b00000000000000000000000000000001))) $e27))) $e27)) $e27))
(assert (! .f8 :interpolation-group .g0))

(define-fun .f9 () Bool (ite (not $e2) (ite $e3 $e21 (ite $e4 (ite $e22 $e21 (ite $e23 (ite $e24 $e21 (= s_clk_cnt_1 (bvadd s_clk_cnt_0 #b00000000000000000000000000000001))) $e25)) $e25)) $e25))
(assert (! .f9 :interpolation-group .g0))

(define-fun .f10 () Bool (ite (not $e2) (ite $e3 (= fpga_alive_reg_written_1 #b0) (ite $e4 (ite $e7 (ite $e8 (ite $e9 (= fpga_alive_reg_written_1 #b1) $e20) $e20) $e20) $e20)) $e20))
(assert (! .f10 :interpolation-group .g0))


(define-fun $f1 () Bool (= reset_1 #b1))
(define-fun $f2 () Bool (= fpga_alive_dis_1 #b0))
(define-fun $f3 () Bool (= sfpga_alive_1 #b1))
(define-fun $f4 () Bool (= fpga_alive_pulse_1 #b1))
(define-fun $f5 () Bool (= state_fpga_alive_gen_pulse_1 #b0000))
(define-fun $f6 () Bool (= (bvadd sfpga_alive_0 sfpga_alive_1) #b0))
(define-fun $f7 () Bool (and $f2 $f1 $f3 $f4 $f5 (not $f6)))
(define-fun $f8 () Bool (= (bvadd reset_0 reset_1) #b0))
(define-fun $f9 () Bool (= fpga_rst_1 #b0))
(define-fun $f10 () Bool (= fpga_alive_cnt_1 #b0000000000000000))
(define-fun $f11 () Bool (= fpga_alive_pulse_1 #b0))
(define-fun $f12 () Bool (and $f3 $f1 $f11 $f5 (not $f6)))
(define-fun $f13 () Bool (= (bvadd clk_0 clk_1) #b0))
(define-fun $f14 () Bool (and $f6 $f1))
(define-fun $f15 () Bool (and $f3 $f14))
(define-fun $f16 () Bool (and $f11 $f15 $f5))
(define-fun $f17 () Bool (= (bvadd fpga_alive_dis_0 fpga_alive_dis_1) #b0))
(define-fun $f18 () Bool (= (bvadd fpga_alive_pulse_0 fpga_alive_pulse_1) #b0))
(define-fun $f19 () Bool (and $f17 $f15 $f18 $f5))
(define-fun $f20 () Bool (= sfpga_alive_0 #b1))
(define-fun $f21 () Bool (and $f2 $f14 $f3 $f4 $f20 $f5))
(define-fun $f22 () Bool (= clk_1 #b1))
(define-fun $f23 () Bool (= fpga_rst_1 #b1))
(define-fun $f24 () Bool (and $f23 $f22))
(define-fun $f25 () Bool (and $f6 $f24))
(define-fun $f26 () Bool (and $f3 $f25))
(define-fun $f27 () Bool (and $f11 $f26))
(define-fun $f28 () Bool (= state_fpga_alive_gen_pulse_0 #b0000))
(define-fun $f29 () Bool (and $f28 $f27))
(define-fun $f30 () Bool (= state_fpga_alive_gen_pulse_1 #b0001))
(define-fun $f31 () Bool (and $f30 $f29))
(define-fun $f32 () (_ BitVec 16) (bvmul #b0000000000000010 data_in_1))
(define-fun $f33 () Bool (bvult $f32 #b0000000000000101))
(define-fun $f34 () Bool (= sel_fpga_alive_reg_1 #b1))
(define-fun $f35 () Bool (and $f2 $f25))
(define-fun $f36 () Bool (and $f3 $f35 $f4 $f20))
(define-fun $f37 () Bool (and $f28 $f36))
(define-fun $f38 () Bool (and $f30 $f37))
(define-fun $f39 () Bool (bvult #b0000000000000100 $f32))
(define-fun $f40 () Bool (and (not $f13) $f38 (not $f17)))
(define-fun $f41 () Bool (and (not $f39) $f31))
(define-fun $f42 () Bool (and (not $f13) $f31 (not $f2) (not $f17)))
(define-fun $f43 () Bool (and $f17 $f26 $f18))
(define-fun $f44 () Bool (and $f28 $f43))
(define-fun $f45 () Bool (and $f30 $f44))
(define-fun $f46 () Bool (and (not $f13) $f45))
(define-fun $f47 () Bool (and $f2 $f24 $f3 $f4))
(define-fun $f48 () Bool (and $f28 $f47))
(define-fun $f49 () Bool (and $f30 $f48 (not $f6) (not $f13)))
(define-fun $f50 () Bool (and $f3 $f24 $f11))
(define-fun $f51 () Bool (and $f28 $f50))
(define-fun $f52 () Bool (and $f30 $f51))
(define-fun $f53 () Bool (= state_fpga_alive_gen_pulse_1 #b0010))
(define-fun $f54 () Bool (and $f53 $f48))
(define-fun $f55 () Bool (and $f53 $f37))
(define-fun $f56 () Bool (and (not $f13) $f55 (not $f17)))
(define-fun $f57 () Bool (and $f53 $f44))
(define-fun $f58 () Bool (and (not $f13) $f57))
(define-fun $f59 () Bool (and $f53 $f29))
(define-fun $f60 () Bool (and (not $f13) $f59 (not $f2) (not $f17)))
(define-fun $f61 () Bool (and (not $f6) $f54 (not $f13)))
(define-fun $f62 () Bool (= state_fpga_alive_gen_pulse_0 #b0010))
(define-fun $f63 () Bool (and $f62 $f47))
(define-fun $f64 () Bool (and $f5 $f63))
(define-fun $f65 () Bool (= state_fpga_alive_gen_pulse_0 #b0001))
(define-fun $f66 () Bool (and (not $f6) $f64 (not $f13)))
(define-fun $f67 () Bool (= (bvadd (bvmul #b1111 state_fpga_alive_gen_pulse_0) state_fpga_alive_gen_pulse_1) #b0000))
(define-fun $f68 () Bool (= (bvadd fpga_rst_0 fpga_rst_1) #b0))
(define-fun $f69 () Bool (and $f6 $f68))
(define-fun $f70 () Bool (and $f11 $f69))
(define-fun $f71 () Bool (and (not $f8) $f70))
(define-fun $f72 () Bool (and $f13 $f8 $f68 $f6))
(define-fun $f73 () Bool (and $f11 $f72))
(define-fun $f74 () Bool (and $f68 $f13 $f6))
(define-fun $f75 () Bool (and $f11 $f74 (not $f8)))
(define-fun $f76 () Bool (and (not $f13) $f70))
(define-fun $f77 () Bool (and $f2 $f69 $f4 $f20))
(define-fun $f78 () Bool (and $f17 $f69 $f18))
(define-fun $f79 () Bool (and $f62 $f36))
(define-fun $f80 () Bool (and $f65 $f27 $f30))
(define-fun $f81 () Bool (and (not $f8) $f80 (not $f13) (not $f2) (not $f17)))
(define-fun $f82 () Bool (and (not $f39) $f80))
(define-fun $f83 () Bool (= sfpga_alive_1 #b0))
(define-fun $f84 () Bool (and $f11 $f24))
(define-fun $f85 () Bool (and $f65 $f84 $f30 $f83 (not $f39) (not $f6)))
(define-fun $f86 () Bool (and $f11 $f25))
(define-fun $f87 () Bool (and $f65 $f86 $f30 $f83 (not $f39)))
(define-fun $f88 () Bool (and $f17 $f25 $f18))
(define-fun $f89 () Bool (and $f65 $f88 $f30 $f83 (not $f39)))
(define-fun $f90 () Bool (and $f62 $f50))
(define-fun $f91 () Bool (and (not $f39) $f90 (not $f6)))
(define-fun $f92 () Bool (and $f62 $f43))
(define-fun $f93 () Bool (and $f62 $f86 $f53 $f83 (not $f39)))
(define-fun $f94 () Bool (and $f62 $f27))
(define-fun $f95 () Bool (and (not $f39) $f94))
(define-fun $f96 () Bool (and (not $f39) $f79))
(define-fun $f97 () Bool (and $f62 $f88 $f53 $f83 (not $f39)))
(define-fun $f98 () Bool (and $f62 $f84 $f53 $f83 (not $f39) (not $f6)))
(define-fun $f99 () Bool (and $f5 $f86))
(define-fun $f100 () Bool (and (not $f39) $f99))
(define-fun $f101 () Bool (and (not $f13) $f100))
(define-fun $f102 () Bool (and $f4 $f35 $f20 $f5 (not $f39)))
(define-fun $f103 () Bool (ite $f30 true $f53))
(define-fun $f104 () Bool (= (bvadd state_fpga_alive_gen_pulse_0 (bvmul #b1111 state_fpga_alive_gen_pulse_1)) #b0000))
(define-fun $f105 () Bool (ite $f5 true (ite $f53 (ite $f104 true $f83) $f104)))
(define-fun $f106 () Bool (ite $f28 $f103 (ite $f65 $f30 (ite $f62 $f105 $f5))))
(define-fun $f107 () Bool (ite $f18 $f106 false))
(define-fun $f108 () Bool (ite $f17 $f107 $f106))
(define-fun $f109 () Bool (ite $f17 $f107 false))
(define-fun $f110 () Bool (ite $f30 $f83 false))
(define-fun $f111 () Bool (ite $f53 $f83 false))
(define-fun $f112 () Bool (ite $f28 false (ite $f65 $f110 (ite $f62 $f111 $f5))))
(define-fun $f113 () Bool (ite $f18 $f112 false))
(define-fun $f114 () Bool (ite $f17 $f113 $f112))
(define-fun $f115 () Bool (ite $f17 $f113 false))
(define-fun $f116 () Bool (ite $f28 $f103 (ite $f65 $f30 (ite $f62 $f105 false))))
(define-fun $f117 () Bool (ite $f11 (ite $f28 false (ite $f65 $f110 (ite $f62 $f111 false))) false))
(define-fun $f118 () Bool (ite $f6 (ite $f2 (ite $f3 (ite $f4 (ite $f11 $f108 (ite $f17 $f107 (ite $f20 $f106 false))) (ite $f11 (ite $f17 $f107 (ite $f20 false $f106)) $f109)) (ite $f4 (ite $f11 $f114 (ite $f17 $f113 (ite $f20 $f112 false))) (ite $f11 (ite $f17 $f113 (ite $f20 false $f112)) $f115))) (ite $f3 (ite $f11 $f108 $f109) (ite $f11 $f114 $f115))) (ite $f2 (ite $f3 (ite $f4 $f116 false) $f117) (ite $f3 (ite $f11 $f116 false) $f117))))

(define-fun .f11 () Bool (not (not (and (not (and (not $f8) $f7 $f9 $f10)) (not (and (not $f13) $f12 (not $f2) $f9 $f10)) (not (and (not $f8) $f12 (not $f2) $f9 $f10)) (not (and (not $f8) $f16 (not $f2) (not $f17) $f9 $f10)) (not (and (not $f13) $f7 $f9 $f10)) (not (and (not $f8) $f19 $f9 $f10)) (not (and (not $f13) $f19 $f9 $f10)) (not (and (not $f13) $f16 (not $f2) (not $f17) $f9 $f10)) (not (and (not $f13) $f21 (not $f17) $f9 $f10)) (not (and (not $f8) $f21 (not $f17) $f9 $f10)) (not (and (not $f8) $f31 (not $f13) (not $f2) (not $f17) (not $f33) (not $f1) (not $f34))) (not (and (not $f39) $f38 (not $f13) (not $f17) (not $f1))) (not (and (not $f33) $f40 (not $f1) (not $f34))) (not (and (not $f8) $f41 (not $f13) (not $f2) (not $f17) (not $f1))) (not (and (not $f13) $f41 (not $f2) (not $f17) (not $f1))) (not (and (not $f33) $f42 (not $f1) (not $f34))) (not (and (not $f1) $f42)) (not (and (not $f1) $f40)) (not (and (not $f33) $f46 (not $f1) (not $f34))) (not (and (not $f39) $f45 (not $f13) (not $f1))) (not (and (not $f33) $f49 (not $f1) (not $f34))) (not (and (not $f39) $f52 (not $f6) (not $f13) (not $f2) (not $f1))) (not (and (not $f1) $f46)) (not (and (not $f1) $f49)) (not (and (not $f6) $f52 (not $f13) (not $f2) (not $f1))) (not (and $f53 $f51 (not $f6) (not $f13) (not $f2) (not $f1))) (not (and (not $f39) $f54 (not $f6) (not $f13) (not $f1))) (not (and (not $f39) $f55 (not $f13) (not $f17) (not $f1))) (not (and (not $f33) $f56 (not $f1) (not $f34))) (not (and (not $f1) $f56)) (not (and (not $f39) $f57 (not $f13) (not $f1))) (not (and (not $f33) $f58 (not $f1) (not $f34))) (not (and (not $f39) $f59 (not $f13) (not $f2) (not $f17) (not $f1))) (not (and (not $f1) $f58)) (not (and (not $f33) $f60 (not $f1) (not $f34))) (not (and (not $f1) $f60)) (not (and (not $f33) $f61 (not $f1) (not $f34))) (not (and (not $f1) $f61)) (not (and (not $f39) $f64 (not $f6) (not $f13) (not $f1) (not $f28) (not $f65))) (not (and (not $f33) $f66 (not $f1) (not $f34) (not $f28) (not $f65))) (not (and (not $f1) $f66 (not $f28) (not $f65))) (not (and (not $f39) $f63 (not $f6) (not $f13) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f17) $f71 (not $f1) $f67 (not $f20) (not $f22))) (not (and (not $f2) $f73 (not $f17) $f67)) (not (and $f17 $f72 $f18 $f67)) (not (and $f2 $f72 $f4 $f20 (not $f17) $f67)) (not (and (not $f17) $f73 $f67 (not $f20))) (not (and (not $f17) $f75 (not $f1) $f67 (not $f20))) (not (and $f2 $f74 $f4 $f20 (not $f8) (not $f17) (not $f1) $f67)) (not (and (not $f17) $f76 (not $f1) $f67 (not $f20) (not $f22))) (not (and $f17 $f74 $f18 (not $f8) (not $f1) $f67)) (not (and (not $f8) $f77 (not $f17) (not $f1) $f67 (not $f22))) (not (and (not $f13) $f77 (not $f17) (not $f1) $f67 (not $f22))) (not (and (not $f2) $f75 (not $f17) (not $f1) $f67)) (not (and (not $f8) $f78 (not $f1) $f67 (not $f22))) (not (and (not $f13) $f78 (not $f1) $f67 (not $f22))) (not (and (not $f2) $f71 (not $f17) (not $f1) $f67 (not $f22))) (not (and (not $f2) $f76 (not $f17) (not $f1) $f67 (not $f22))) (not (and (not $f8) $f79 (not $f13) (not $f17) (not $f33) (not $f1) (not $f34) (not $f28) (not $f65) $f67)) (not (and (not $f33) $f81 (not $f1) (not $f34) (not $f28))) (not (and (not $f8) $f82 (not $f13) (not $f2) (not $f17) (not $f1) (not $f28))) (not (and $f34 $f24 $f11 $f65 $f30 $f83 (not $f6) (not $f8) (not $f13) (not $f33) (not $f1) (not $f28) (not $f3) (= (bvadd (bvmul #b1111111111111111 data_in_1) fpga_alive_cnt_1) #b0000000000000000))) (not (and (not $f8) $f85 (not $f13) (not $f1) (not $f28) (not $f3))) (not (and (not $f13) $f85 (not $f1) (not $f28) (not $f3))) (not (and (not $f8) $f87 (not $f13) (not $f17) (not $f1) (not $f28) (not $f20))) (not (and (not $f13) $f87 (not $f17) (not $f1) (not $f28) (not $f20))) (not (and (not $f8) $f89 (not $f13) (not $f1) (not $f28))) (not (and (not $f13) $f89 (not $f1) (not $f28))) (not (and (not $f8) $f91 (not $f13) (not $f2) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f39) $f92 (not $f13) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f8) $f93 (not $f13) (not $f17) (not $f1) (not $f28) (not $f65) (not $f20))) (not (and (not $f8) $f95 (not $f13) (not $f2) (not $f17) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f13) $f91 (not $f2) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f8) $f96 (not $f13) (not $f17) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f13) $f95 (not $f2) (not $f17) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f13) $f93 (not $f17) (not $f1) (not $f28) (not $f65) (not $f20))) (not (and (not $f13) $f96 (not $f17) (not $f1) (not $f28) (not $f65) $f67)) (not (and (not $f8) $f97 (not $f13) (not $f1) (not $f28) (not $f65))) (not (and (not $f8) $f98 (not $f13) (not $f1) (not $f28) (not $f65) (not $f3))) (not (and (not $f13) $f98 (not $f1) (not $f28) (not $f65) (not $f3))) (not (and (not $f13) $f97 (not $f1) (not $f28) (not $f65))) (not (and $f5 $f88 (not $f39) (not $f13) (not $f1) (not $f28) (not $f65) (not $f62))) (not (and (not $f17) $f101 (not $f1) (not $f28) (not $f65) (not $f20) (not $f62))) (not (and (not $f8) $f100 (not $f13) (not $f2) (not $f17) (not $f1) (not $f28) (not $f65) (not $f62))) (not (and (not $f2) $f101 (not $f17) (not $f1) (not $f28) (not $f65) (not $f62))) (not (and (not $f8) $f102 (not $f13) (not $f17) (not $f1) (not $f28) (not $f65) (not $f62))) (not (and (not $f13) $f102 (not $f17) (not $f1) (not $f28) (not $f65) (not $f62))) (not (and (not $f8) $f99 (not $f13) (not $f17) (not $f33) (not $f1) (not $f34) (not $f28) (not $f65) (not $f20) (not $f62))) (not (and (not $f8) $f92 (not $f13) (not $f33) (not $f1) (not $f34) (not $f28) (not $f65) $f67)) (not (and (not $f6) $f90 (not $f8) (not $f13) (not $f2) (not $f33) (not $f1) (not $f34) (not $f28) (not $f65) $f67)) (not (and $f5 $f94 (not $f39) (not $f8) (not $f13) (not $f2) (not $f17) (not $f1) (not $f28) (not $f65))) (not (and (not $f13) $f82 (not $f2) (not $f17) (not $f1) (not $f28))) (not (and (not $f1) $f81 (not $f28))) (not (and $f65 $f36 $f30 (not $f39) (not $f8) (not $f13) (not $f17) (not $f1) (not $f28))) (not (and $f22 $f39 $f23 (not $f13) (not $f1) (not $f34) $f118)) (not (and (not $f39) $f24 (not $f13) (not $f1) $f118)) (not (and (not $f13) $f24 (not $f1) $f118)) true))))

(assert (! .f11 :interpolation-group .g1))

(declare-fun next_data_in_1 () (_ BitVec 16))
(declare-fun next_fpga_alive_cnt_1 () (_ BitVec 16))
(declare-fun next_fpga_alive_dis_0 () (_ BitVec 1))
(declare-fun next_fpga_alive_dis_1 () (_ BitVec 1))
(declare-fun next_fpga_alive_pulse_0 () (_ BitVec 1))
(declare-fun next_fpga_alive_pulse_1 () (_ BitVec 1))
(declare-fun next_state_fpga_alive_gen_pulse_0 () (_ BitVec 4))
(declare-fun next_state_fpga_alive_gen_pulse_1 () (_ BitVec 4))

(define-fun .f12 () Bool (not (bvult next_state_fpga_alive_gen_pulse_1 state_fpga_alive_gen_pulse_1)))
(assert (! .f12 :interpolation-group .g1))

(define-fun .f13 () Bool (bvult next_state_fpga_alive_gen_pulse_0 state_fpga_alive_gen_pulse_0))
(assert (! .f13 :interpolation-group .g1))

(define-fun .f14 () Bool (not (and (= fpga_alive_dis_1 next_fpga_alive_dis_1) (= fpga_alive_dis_0 next_fpga_alive_dis_0) (= fpga_alive_pulse_0 next_fpga_alive_pulse_0) (= fpga_alive_pulse_1 next_fpga_alive_pulse_1))))
(assert (! .f14 :interpolation-group .g1))

(define-fun .f15 () Bool (not (bvult next_fpga_alive_cnt_1 fpga_alive_cnt_1)))
(assert (! .f15 :interpolation-group .g1))

(define-fun .f16 () Bool (bvult next_data_in_1 data_in_1))
(assert (! .f16 :interpolation-group .g1))

(check-sat)
(get-interpolant (.g0))
