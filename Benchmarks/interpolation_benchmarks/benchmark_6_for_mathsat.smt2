(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")

(reset-assertions)
(declare-fun clk_1 () (_ BitVec 1))
(declare-fun clk_2 () (_ BitVec 1))
(declare-fun clk_3 () (_ BitVec 1))
(declare-fun clk_4 () (_ BitVec 1))
(declare-fun count_1 () (_ BitVec 32))
(declare-fun count_2 () (_ BitVec 32))
(declare-fun count_3 () (_ BitVec 32))
(declare-fun gamma_1 () (_ BitVec 32))
(declare-fun gamma_2 () (_ BitVec 32))
(declare-fun gamma_3 () (_ BitVec 32))
(declare-fun ind_1 () (_ BitVec 32))
(declare-fun ind_2 () (_ BitVec 32))
(declare-fun ind_3 () (_ BitVec 32))
(declare-fun max_1 () (_ BitVec 32))
(declare-fun max_2 () (_ BitVec 32))
(declare-fun max_3 () (_ BitVec 32))
(declare-fun nl_1 () (_ BitVec 32))
(declare-fun nl_0 () (_ BitVec 32))
(declare-fun nloss_1 () (_ BitVec 1))
(declare-fun nloss_0 () (_ BitVec 1))
(declare-fun num_2 () (_ BitVec 32))
(declare-fun reset_1 () (_ BitVec 1))
(declare-fun reset_2 () (_ BitVec 1))
(declare-fun reset_3 () (_ BitVec 1))
(declare-fun reset_4 () (_ BitVec 1))
(declare-fun scan_1 () (_ BitVec 32))
(declare-fun scan_2 () (_ BitVec 32))
(declare-fun scan_3 () (_ BitVec 32))
(declare-fun sound_2 () (_ BitVec 32))
(declare-fun sound_3 () (_ BitVec 32))
(declare-fun start_2 () (_ BitVec 1))
(declare-fun timebase_1 () (_ BitVec 32))
(declare-fun timebase_2 () (_ BitVec 32))
(declare-fun timebase_3 () (_ BitVec 32))
(declare-fun autoname_4 () (_ BitVec 1))
(declare-fun autoname_5 () (_ BitVec 1))
(declare-fun autoname_6 () (_ BitVec 1))
(declare-fun autoname_7 () (_ BitVec 1))
(declare-fun autoname_8 () (_ BitVec 1))
(declare-fun autoname_9 () (_ BitVec 1))
(declare-fun autoname_10 () (_ BitVec 1))
(declare-fun autoname_11 () (_ BitVec 1))
(declare-fun autoname_12 () (_ BitVec 1))
(declare-fun autoname_1 () (_ BitVec 1))
(declare-fun autoname_2 () (_ BitVec 1))
(declare-fun autoname_3 () (_ BitVec 1))
(define-fun $e1 () Bool (= clk_1 clk_2))
(define-fun $e2 () Bool (and (= reset_1 reset_2) $e1))
(define-fun $e3 () Bool (= reset_1 #b1))
(define-fun $e4 () Bool (= nloss_0 #b0))
(define-fun $e5 () Bool (and (= clk_1 #b1) (not $e1)))
(define-fun $e6 () Bool (= gamma_1 #b00000000000000000000000000000000))
(define-fun $e7 () Bool (= nloss_0 nloss_1))
(define-fun $e8 () Bool (= gamma_1 #b00000000000000000000000000000001))
(define-fun $e9 () Bool (= gamma_1 #b00000000000000000000000000000010))
(define-fun $e10 () Bool (= gamma_1 #b00000000000000000000000000000011))
(define-fun $e11 () Bool (= gamma_1 #b00000000000000000000000000000100))
(define-fun $e12 () Bool (= gamma_1 #b00000000000000000000000000000101))
(define-fun $e13 () Bool (= gamma_1 #b00000000000000000000000000000110))
(define-fun $e14 () Bool (= gamma_1 #b00000000000000000000000000000111))
(define-fun $e15 () Bool (= gamma_1 #b00000000000000000000000000001000))
(define-fun $e16 () Bool (= gamma_1 #b00000000000000000000000000001001))
(define-fun $e17 () Bool (= gamma_1 #b00000000000000000000000000010000))
(define-fun $e18 () (_ BitVec 32) (bvmul #b00000000000000000000000000000100 scan_1))
(define-fun $e19 () (_ BitVec 32) (bvmul #b00000000000000000000000000000010 max_1))
(define-fun $e20 () Bool (= nloss_0 #b1))
(define-fun $e21 () Bool (= clk_2 clk_3))
(define-fun $e22 () Bool (and (= reset_2 reset_3) $e21))
(define-fun $e23 () Bool (= reset_2 #b1))
(define-fun $e24 () Bool (= count_1 #b00000000000000000000000000000000))
(define-fun $e25 () Bool (and (= clk_2 #b1) (not $e21)))
(define-fun $e26 () Bool (= gamma_2 #b00000000000000000000000000000000))
(define-fun $e27 () Bool (= count_1 count_2))
(define-fun $e28 () Bool (= gamma_2 #b00000000000000000000000000000001))
(define-fun $e29 () Bool (= gamma_2 #b00000000000000000000000000000010))
(define-fun $e30 () Bool (= gamma_2 #b00000000000000000000000000000011))
(define-fun $e31 () Bool (= gamma_2 #b00000000000000000000000000000100))
(define-fun $e32 () Bool (= gamma_2 #b00000000000000000000000000000101))
(define-fun $e33 () Bool (= count_1 timebase_2))
(define-fun $e34 () Bool (= gamma_2 #b00000000000000000000000000000110))
(define-fun $e35 () (_ BitVec 32) (bvmul #b00000000000000000000000000000010 scan_2))
(define-fun $e36 () Bool (bvult (bvadd $e35 max_2) count_2))
(define-fun $e37 () Bool (= count_1 (bvadd count_2 #b00000000000000000000000000000001)))
(define-fun $e38 () Bool (= gamma_2 #b00000000000000000000000000000111))
(define-fun $e39 () (_ BitVec 32) (bvmul #b00000000000000000000000000000100 scan_2))
(define-fun $e40 () (_ BitVec 32) (bvmul #b00000000000000000000000000000010 max_2))
(define-fun $e41 () Bool (bvult (bvadd $e39 $e40) count_2))
(define-fun $e42 () Bool (= gamma_2 #b00000000000000000000000000001000))
(define-fun $e43 () Bool (= gamma_2 #b00000000000000000000000000001001))
(define-fun $e44 () Bool (= gamma_2 #b00000000000000000000000000010000))
(define-fun $e45 () Bool (= autoname_2 #b1))
(define-fun $e46 () Bool (= autoname_5 #b1))
(define-fun $e47 () Bool (= autoname_8 #b1))
(define-fun $e48 () Bool (= autoname_11 #b1))
(define-fun $e49 () Bool (= gamma_2 #b00000000000000000000000000010001))
(define-fun $e50 () Bool (= gamma_2 #b00000000000000000000000000010010))
(define-fun $e51 () (_ BitVec 32) (bvmul #b00000000000000000000000000001000 scan_2))
(define-fun $e52 () Bool (bvult (bvadd $e51 $e40) count_2))
(define-fun $e53 () Bool (= gamma_2 #b00000000000000000000000000010011))
(define-fun $e54 () Bool (= count_2 #b00000000000000000000000000000000))
(define-fun $e55 () Bool (= scan_2 max_2))
(define-fun $e56 () Bool (= max_2 #b00000000000000000000000000000000))
(define-fun $e57 () Bool (= count_1 #b00000000000000000000000000001000))
(define-fun $e58 () Bool (= gamma_2 #b00000000000000000000000000010100))
(define-fun $e59 () Bool (= gamma_2 #b00000000000000000000000000010101))
(define-fun $e60 () (_ BitVec 32) (bvmul #b00000000000000000000000000000100 max_2))
(define-fun $e61 () Bool (= count_2 (bvadd $e51 $e60)))
(define-fun $e62 () Bool (= gamma_2 #b00000000000000000000000000010110))
(define-fun $e63 () Bool (= count_2 (bvadd $e35 (bvmul #b00000000000000000000000000001000 max_2))))
(define-fun $e64 () Bool (= gamma_2 #b00000000000000000000000000010111))
(define-fun $e65 () Bool (= gamma_2 #b00000000000000000000000000011000))
(define-fun $e66 () Bool (= gamma_2 #b00000000000000000000000000011001))
(define-fun $e67 () Bool (= gamma_2 #b00000000000000000000000000100000))
(define-fun $e68 () Bool (= count_2 (bvadd $e35 $e60)))
(define-fun $e69 () Bool (= gamma_2 #b00000000000000000000000000100001))
(define-fun $e70 () Bool (= max_2 scan_2))
(define-fun $e71 () Bool (= gamma_2 #b00000000000000000000000000100010))
(define-fun $e72 () Bool (= gamma_2 #b00000000000000000000000000100011))
(define-fun $e73 () Bool (= count_2 (bvadd (bvadd $e39 (bvmul #b00000000000000000000000000000010 timebase_2)) (bvmul #b00000000000000000000000000001000 ind_2))))
(define-fun $e74 () Bool (ite $e73 $e57 $e37))
(define-fun $e75 () Bool (= gamma_2 #b00000000000000000000000000100100))
(define-fun $e76 () Bool (= gamma_2 #b00000000000000000000000000100101))
(define-fun $e77 () Bool (= count_2 (bvadd $e39 (bvmul #b00000000000000000000000000000010 ind_2))))
(define-fun $e78 () (_ BitVec 32) (bvmul #b00000000000000000000000000000010 sound_2))
(define-fun $e79 () Bool (bvult $e40 scan_2))
(define-fun $e80 () Bool (= gamma_1 #b00000000000000000000000000010111))
(define-fun $e81 () Bool (= gamma_1 #b00000000000000000000000000100000))
(define-fun $e82 () Bool (= gamma_1 #b00000000000000000000000000010010))
(define-fun $e83 () Bool (= gamma_1 #b00000000000000000000000000010011))
(define-fun $e84 () Bool (= gamma_1 #b00000000000000000000000000100100))
(define-fun $e85 () Bool (= gamma_1 #b00000000000000000000000000010101))
(define-fun $e86 () Bool (= gamma_1 #b00000000000000000000000000010110))
(define-fun $e87 () Bool (= gamma_1 #b00000000000000000000000000011000))
(define-fun $e88 () Bool (= gamma_1 #b00000000000000000000000000011001))
(define-fun $e89 () Bool (= gamma_1 #b00000000000000000000000000100001))
(define-fun $e90 () Bool (= gamma_1 #b00000000000000000000000000100010))
(define-fun $e91 () Bool (= gamma_1 #b00000000000000000000000000100011))
(define-fun $e92 () Bool (= gamma_1 #b00000000000000000000000000100101))
(define-fun $e93 () Bool (= gamma_1 gamma_2))
(define-fun $e94 () Bool (= ind_1 #b00000000000000000000000000000000))
(define-fun $e95 () Bool (= ind_1 ind_2))
(define-fun $e96 () Bool (= max_1 #b00000000000000000000000000000000))
(define-fun $e97 () Bool (= max_1 max_2))
(define-fun $e98 () Bool (= max_1 (bvadd max_2 #b00000000000000000000000000000001)))
(define-fun $e99 () Bool (= scan_1 #b00000000000000000000000000000000))
(define-fun $e100 () Bool (= scan_1 scan_2))
(define-fun $e101 () Bool (= scan_1 (bvadd scan_2 #b00000000000000000000000000000001)))
(define-fun $e102 () Bool (= clk_3 clk_4))
(define-fun $e103 () Bool (= sound_2 #b00000000000000000000000000000000))
(define-fun $e104 () Bool (= sound_2 sound_3))
(define-fun $e105 () (_ BitVec 32) (bvmul #b00000000000000000000000000000100 scan_3))
(define-fun $e106 () Bool (= count_3 #b00000000000000000000000000000000))
(define-fun $e107 () Bool (= sound_2 #b00000000000000000000000000000100))
(define-fun $e108 () Bool (= sound_2 #b00000000000000000000000000000101))
(define-fun $e109 () Bool (= timebase_1 timebase_2))
(define-fun $e110 () Bool (= nl_0 #b00000000000000000000000000000000))
(define-fun $e111 () Bool (= nl_0 nl_1))
(define-fun $e112 () Bool (= nl_0 #b00000000000000000000000000000001))
(define-fun $e113 () (_ BitVec 32) (bvmul #b00000000000000000000000000000010 scan_1))
(define-fun $e114 () (_ BitVec 32) (bvmul #b00000000000000000000000000001000 scan_1))
(define-fun $e115 () (_ BitVec 32) (bvmul #b00000000000000000000000000000100 max_1))
(define-fun $e116 () Bool (ite (= count_1 (bvadd (bvadd $e18 (bvmul #b00000000000000000000000000000010 timebase_1)) (bvmul #b00000000000000000000000000001000 ind_1))) $e112 $e111))
(define-fun .f1 () Bool (ite (not $e22) (ite $e23 (= timebase_1 #b00000000000000000000000000000000) (ite $e25 (ite $e26 $e109 (ite $e28 (= timebase_1 #b00000000000000000000000000001111) (ite $e29 $e109 (ite $e30 $e109 (ite $e31 $e109 (ite $e32 $e109 (ite $e34 $e109 (ite $e38 $e109 (ite $e42 $e109 (ite $e43 $e109 (ite $e44 $e109 (ite $e49 $e109 (ite $e50 $e109 (ite $e53 (ite $e54 (ite $e55 $e109 (ite $e56 (= timebase_1 (bvadd timebase_2 #b00000000000000000000000000000001)) $e109)) $e109) $e109)))))))))))))) $e109)) $e109))
(define-fun .f2 () Bool (ite (not (and (= reset_3 reset_4) $e102)) (ite (= reset_3 #b1) $e103 (ite (and (= clk_3 #b1) (not $e102)) (ite (= gamma_3 #b00000000000000000000000000000000) $e104 (ite (= gamma_3 #b00000000000000000000000000000001) $e104 (ite (= gamma_3 #b00000000000000000000000000000010) $e104 (ite (= gamma_3 #b00000000000000000000000000000011) $e104 (ite (= gamma_3 #b00000000000000000000000000000100) $e104 (ite (= gamma_3 #b00000000000000000000000000000101) $e103 (ite (= gamma_3 #b00000000000000000000000000000110) $e104 (ite (= gamma_3 #b00000000000000000000000000000111) $e104 (ite (= gamma_3 #b00000000000000000000000000001000) $e104 (ite (= gamma_3 #b00000000000000000000000000001001) $e104 (ite (= gamma_3 #b00000000000000000000000000010000) (ite (bvult (bvadd $e105 (bvmul #b00000000000000000000000000000010 max_3)) count_3) $e104 (ite (= autoname_3 #b1) $e103 (ite (= autoname_6 #b1) (= sound_2 #b00000000000000000000000000000001) (ite (= autoname_9 #b1) (= sound_2 #b00000000000000000000000000000010) (ite (= autoname_12 #b1) (= sound_2 #b00000000000000000000000000000011) $e104))))) (ite (= gamma_3 #b00000000000000000000000000010001) $e104 (ite (= gamma_3 #b00000000000000000000000000010010) $e104 (ite (= gamma_3 #b00000000000000000000000000010011) (ite $e106 (ite (= scan_3 max_3) $e104 (ite (= max_3 #b00000000000000000000000000000000) $e104 $e107)) $e104) (ite (= gamma_3 #b00000000000000000000000000010100) $e104 (ite (= gamma_3 #b00000000000000000000000000010101) $e104 (ite (= gamma_3 #b00000000000000000000000000010110) $e104 (ite (= gamma_3 #b00000000000000000000000000010111) $e104 (ite (= gamma_3 #b00000000000000000000000000011000) $e104 (ite (= gamma_3 #b00000000000000000000000000011001) $e103 (ite (= gamma_3 #b00000000000000000000000000100000) $e104 (ite (= gamma_3 #b00000000000000000000000000100001) (ite $e106 (ite (= max_3 scan_3) $e104 $e108) $e104) (ite (= gamma_3 #b00000000000000000000000000100010) $e104 (ite (= gamma_3 #b00000000000000000000000000100011) (ite (= count_3 (bvadd (bvadd $e105 (bvmul #b00000000000000000000000000000010 timebase_3)) (bvmul #b00000000000000000000000000001000 ind_3))) $e108 $e104) (ite (= gamma_3 #b00000000000000000000000000100100) $e104 (ite (= gamma_3 #b00000000000000000000000000100101) (ite (= count_3 (bvadd $e105 (bvmul #b00000000000000000000000000000010 ind_3))) $e107 $e104) $e104)))))))))))))))))))))))))) $e104)) $e104))
(define-fun .f3 () Bool (ite (not $e22) (ite $e23 $e99 (ite $e25 (ite $e26 $e100 (ite $e28 $e100 (ite $e29 $e99 (ite $e30 $e100 (ite $e31 $e100 (ite $e32 $e100 (ite $e34 $e100 (ite $e38 (ite (not $e41) (ite $e79 $e101 $e99) $e100) (ite $e42 $e100 (ite $e43 $e100 (ite $e44 $e100 (ite $e49 $e100 (ite $e50 $e100 (ite $e53 (ite $e54 (ite $e55 $e101 $e100) $e100) $e100)))))))))))))) $e100)) $e100))
(define-fun .f4 () Bool (ite (not $e22) (ite $e23 $e96 (ite $e25 (ite $e26 $e97 (ite $e28 $e96 (ite $e29 $e97 (ite $e30 $e97 (ite $e31 $e97 (ite $e32 $e97 (ite $e34 $e97 (ite $e38 $e97 (ite $e42 $e97 (ite $e43 $e97 (ite $e44 (ite $e41 $e96 $e97) (ite $e49 $e97 (ite $e50 $e97 (ite $e53 (ite $e54 (ite $e55 $e97 (ite $e56 $e98 $e97)) $e97) (ite $e58 $e97 (ite $e59 $e97 (ite $e62 (ite $e63 $e96 $e97) (ite $e64 $e97 (ite $e65 $e97 (ite $e66 $e97 (ite $e67 $e97 (ite $e69 (ite $e54 (ite $e70 $e98 $e97) $e97) $e97)))))))))))))))))))))) $e97)) $e97))
(define-fun .f5 () Bool (ite (not $e22) (ite $e23 $e94 (ite $e25 (ite $e26 $e95 (ite $e28 $e95 (ite $e29 $e95 (ite $e30 $e95 (ite $e31 $e95 (ite $e32 $e95 (ite $e34 $e95 (ite $e38 $e95 (ite $e42 $e95 (ite $e43 $e95 (ite $e44 (ite $e41 $e95 (ite $e45 $e94 (ite $e46 (= ind_1 #b00000000000000000000000000000001) (ite $e47 (= ind_1 #b00000000000000000000000000000010) (ite $e48 (= ind_1 #b00000000000000000000000000000011) $e95))))) $e95))))))))))) $e95)) $e95))
(define-fun .f6 () Bool (ite (not $e22) (ite $e23 $e6 (ite $e25 (ite $e26 (= gamma_1 (bvadd (bvadd (bvmul #b00000000000000000000000000000010 num_2) $e78) #b00000000000000000000000000000111)) (ite $e28 (= gamma_1 (bvadd (bvmul #b00000000000000000000000000001000 num_2) (bvmul #b00000000000000000000000000000100 sound_2))) (ite $e29 $e10 (ite $e30 (= gamma_1 (bvadd (bvmul #b00000000000000000000000000010110 num_2) $e78)) (ite $e31 $e12 (ite $e32 $e13 (ite $e34 (ite (not $e36) $e14 $e13) (ite $e38 (ite (not $e41) (ite $e79 $e10 $e15) $e14) (ite $e42 $e16 (ite $e43 $e8 (ite $e44 (ite $e41 $e80 (ite $e45 $e81 (ite $e46 $e81 (ite $e47 $e81 (ite $e48 $e81 $e17))))) (ite $e49 $e82 (ite $e50 (ite (not $e52) $e83 $e82) (ite $e53 (ite $e54 (ite $e55 $e15 (ite $e56 $e9 $e84)) $e83) (ite $e58 $e85 (ite $e59 (ite $e61 $e86 $e85) (ite $e62 (ite $e63 $e80 $e86) (ite $e64 $e87 (ite $e65 $e88 (ite $e66 $e81 (ite $e67 (ite $e68 $e89 $e81) (ite $e69 (ite $e54 (ite $e70 $e80 $e90) $e89) (ite $e71 (ite $e54 $e91 $e90) (ite $e72 (ite $e73 $e90 $e91) (ite $e75 (ite $e73 $e92 $e84) (ite $e76 (ite $e77 $e84 $e92) (ite (= start_2 #b1) (= gamma_1 (bvadd (bvmul #b00000000000000000000000000000100 num_2) $e78)) $e93))))))))))))))))))))))))))) $e93)) $e93))
(define-fun .f7 () Bool (ite (not $e22) (ite $e23 $e24 (ite $e25 (ite $e26 $e27 (ite $e28 $e27 (ite $e29 $e27 (ite $e30 $e27 (ite $e31 $e27 (ite $e32 $e33 (ite $e34 (ite (not $e36) $e33 $e37) (ite $e38 (ite (not $e41) $e27 $e37) (ite $e42 (= count_1 #b00000000000000000000000000000011) (ite $e43 $e27 (ite $e44 (ite $e41 $e27 (ite $e45 $e33 (ite $e46 $e33 (ite $e47 $e33 (ite $e48 $e33 $e37))))) (ite $e49 $e27 (ite $e50 (ite (not $e52) $e33 $e37) (ite $e53 (ite $e54 (ite $e55 $e27 (ite $e56 $e27 $e57)) $e37) (ite $e58 $e27 (ite $e59 (ite $e61 $e33 $e37) (ite $e62 (ite $e63 $e27 $e37) (ite $e64 $e27 (ite $e65 $e27 (ite $e66 $e33 (ite $e67 (ite $e68 $e33 $e37) (ite $e69 (ite $e54 (ite $e70 $e27 $e57) $e37) (ite $e71 (ite $e54 $e57 $e37) (ite $e72 $e74 (ite $e75 $e74 (ite $e76 (ite $e77 $e57 $e37) $e27)))))))))))))))))))))))))) $e27)) $e27))
(define-fun .f8 () Bool (ite (not $e2) (ite $e3 $e4 (ite $e5 (ite $e6 $e7 (ite $e8 $e4 (ite $e9 $e7 (ite $e10 $e7 (ite $e11 $e7 (ite $e12 $e7 (ite $e13 $e7 (ite $e14 $e7 (ite $e15 $e7 (ite $e16 $e7 (ite $e17 (ite (bvult (bvadd $e18 $e19) count_1) $e20 (ite (= autoname_1 #b1) $e20 (ite (= autoname_4 #b1) $e20 (ite (= autoname_7 #b1) $e20 (ite (= autoname_10 #b1) $e20 $e7))))) $e7))))))))))) $e7)) $e7))
(define-fun .f9 () Bool (ite (not $e2) (ite $e3 $e110 (ite $e5 (ite $e6 $e111 (ite $e8 $e110 (ite $e9 $e111 (ite $e10 $e111 (ite $e11 $e111 (ite $e12 $e112 (ite $e13 (ite (not (bvult (bvadd $e113 max_1) count_1)) $e110 $e111) (ite $e14 $e111 (ite $e15 $e111 (ite $e16 $e111 (ite $e17 $e111 (ite (= gamma_1 #b00000000000000000000000000010001) $e112 (ite $e82 (ite (not (bvult (bvadd $e114 $e19) count_1)) $e110 $e111) (ite $e83 $e111 (ite (= gamma_1 #b00000000000000000000000000010100) $e112 (ite $e85 (ite (= count_1 (bvadd $e114 $e115)) $e110 $e111) (ite $e86 $e111 (ite $e80 $e111 (ite $e87 $e111 (ite $e88 $e112 (ite $e81 (ite (= count_1 (bvadd $e113 $e115)) $e110 $e111) (ite $e89 (ite $e24 (ite (= max_1 scan_1) $e111 $e112) $e111) (ite $e90 (ite $e24 $e110 $e111) (ite $e91 $e116 (ite $e84 $e116 (ite $e92 (ite (= count_1 (bvadd $e18 (bvmul #b00000000000000000000000000000010 ind_1))) $e110 $e111) $e111)))))))))))))))))))))))))) $e111)) $e111))

(assert (! .f1 :interpolation-group .g0))
(assert (! .f2 :interpolation-group .g0))
(assert (! .f3 :interpolation-group .g0))
(assert (! .f4 :interpolation-group .g0))
(assert (! .f5 :interpolation-group .g0))
(assert (! .f6 :interpolation-group .g0))
(assert (! .f7 :interpolation-group .g0))
(assert (! .f8 :interpolation-group .g0))
(assert (! .f9 :interpolation-group .g0))

(define-fun $f1 () Bool (= reset_2 #b1))
(define-fun $f2 () Bool (= (bvadd clk_3 clk_4) #b0))
(define-fun $f3 () Bool (and $f2 $f1))
(define-fun $f4 () Bool (= (bvadd reset_1 reset_2) #b0))
(define-fun $f5 () Bool (and (not $f4) $f3))
(define-fun $f6 () Bool (= reset_1 #b1))
(define-fun $f7 () Bool (= clk_1 #b1))
(define-fun $f8 () Bool (= (bvadd nloss_0 nloss_1) #b0))
(define-fun $f9 () Bool (= (bvadd nl_0 (bvmul #b11111111111111111111111111111111 nl_1)) #b00000000000000000000000000000000))
(define-fun $f10 () Bool (and (not $f6) $f5 (not $f7) $f8 $f9))
(define-fun $f11 () Bool (= (bvadd reset_3 reset_4) #b0))
(define-fun $f12 () Bool (and $f11 $f10))
(define-fun $f13 () Bool (= (bvadd reset_2 reset_3) #b0))
(define-fun $f14 () Bool (= (bvadd clk_1 clk_2) #b0))
(define-fun $f15 () Bool (= nloss_0 #b0))
(define-fun $f16 () Bool (and (not $f14) $f3 $f15 $f6))
(define-fun $f17 () Bool (and $f11 $f16))
(define-fun $f18 () Bool (= nl_0 #b00000000000000000000000000000000))
(define-fun $f19 () Bool (= (bvadd clk_2 clk_3) #b0))
(define-fun $f20 () Bool (and $f4 $f3 $f14 $f8 $f9))
(define-fun $f21 () Bool (and $f11 $f20))
(define-fun $f22 () Bool (and $f4 $f1 $f14 $f8 $f9))
(define-fun $f23 () Bool (= reset_3 #b1))
(define-fun $f24 () Bool (and (not $f19) $f22 $f23))
(define-fun $f25 () Bool (and (not $f14) $f1 $f15 $f6))
(define-fun $f26 () Bool (and $f18 $f25 (not $f19) $f23))
(define-fun $f27 () Bool (and (not $f4) $f1))
(define-fun $f28 () Bool (and (not $f6) $f27 (not $f7) $f8 $f9))
(define-fun $f29 () Bool (and (not $f19) $f28 $f23))
(define-fun $f30 () Bool (and $f14 $f27 (not $f6) $f8 $f9))
(define-fun $f31 () Bool (and (not $f19) $f30 $f23))
(define-fun $f32 () Bool (and $f14 $f5 (not $f6) $f8 $f9))
(define-fun $f33 () Bool (and $f11 $f32))
(define-fun $f34 () Bool (and (not $f14) $f27 (not $f6) $f7 $f8 $f9))
(define-fun $f35 () Bool (and (not $f19) $f34 $f23))
(define-fun $f36 () Bool (and (not $f14) $f5 (not $f6) $f7 $f8 $f9))
(define-fun $f37 () Bool (and $f11 $f36))
(define-fun $f38 () Bool (and (not $f13) $f30))
(define-fun $f39 () Bool (= clk_3 #b1))
(define-fun $f40 () Bool (and (not $f13) $f28))
(define-fun $f41 () Bool (and (not $f2) $f40))
(define-fun $f42 () Bool (and (not $f2) $f38))
(define-fun $f43 () Bool (and (not $f13) $f34))
(define-fun $f44 () Bool (and (not $f2) $f43))
(define-fun $f45 () Bool (and (not $f13) $f22))
(define-fun $f46 () Bool (and (not $f2) $f45))
(define-fun $f47 () Bool (and (not $f13) $f25 $f18))
(define-fun $f48 () Bool (and (not $f2) $f47))
(define-fun $f49 () Bool (and (not $f14) $f2 (not $f6)))
(define-fun $f50 () Bool (and (not $f7) $f49 $f8 $f9 $f11))
(define-fun $f51 () Bool (= clk_2 #b1))
(define-fun $f52 () Bool (and $f15 (not $f4) $f6))
(define-fun $f53 () Bool (and $f18 $f52 (not $f19)))
(define-fun $f54 () Bool (and $f13 (not $f4)))
(define-fun $f55 () Bool (and $f15 $f54 $f6 $f18 $f19))
(define-fun $f56 () Bool (and $f7 $f49))
(define-fun $f57 () Bool (and $f8 $f56))
(define-fun $f58 () Bool (and $f9 $f57))
(define-fun $f59 () Bool (and $f11 $f58))
(define-fun $f60 () Bool (and $f15 $f56))
(define-fun $f61 () Bool (and $f11 $f60))
(define-fun $f62 () Bool (and (not $f6) (not $f14)))
(define-fun $f63 () Bool (and (not $f7) $f62 $f8 $f9))
(define-fun $f64 () Bool (and (not $f19) $f63))
(define-fun $f65 () Bool (and (not $f4) $f2))
(define-fun $f66 () Bool (and $f15 $f65 $f6))
(define-fun $f67 () Bool (and (not $f13) $f63))
(define-fun $f68 () Bool (and (not $f19) $f67 $f23))
(define-fun $f69 () Bool (and $f7 $f62))
(define-fun $f70 () Bool (and $f8 $f69))
(define-fun $f71 () Bool (and $f9 $f70))
(define-fun $f72 () Bool (and (not $f13) $f71 $f23))
(define-fun $f73 () Bool (and $f14 $f4 $f8 $f9))
(define-fun $f74 () Bool (and (not $f19) $f73))
(define-fun $f75 () Bool (and $f19 $f67 $f23))
(define-fun $f76 () Bool (and $f15 $f69))
(define-fun $f77 () Bool (and (not $f13) $f76 $f18 $f23))
(define-fun $f78 () Bool (and (not $f14) $f13))
(define-fun $f79 () Bool (and (not $f6) $f78))
(define-fun $f80 () Bool (and $f7 $f79))
(define-fun $f81 () Bool (and $f8 $f80))
(define-fun $f82 () Bool (and $f9 $f81 $f19))
(define-fun $f83 () Bool (and (not $f2) $f74))
(define-fun $f84 () Bool (and $f15 $f80 $f18 $f19))
(define-fun $f85 () Bool (and $f9 $f80 $f19))
(define-fun $f86 () Bool (and (not $f2) $f85 (not $f23) (not $f39)))
(define-fun $f87 () Bool (= nloss_0 #b1))
(define-fun $f88 () Bool (and $f87 $f86))
(define-fun $f89 () Bool (= autoname_4 #b1))
(define-fun $f90 () Bool (= autoname_1 #b1))
(define-fun $f91 () Bool (and (not $f89) $f88 (not $f90)))
(define-fun $f92 () Bool (= autoname_10 #b1))
(define-fun $f93 () Bool (= autoname_7 #b1))
(define-fun $f94 () Bool (and (not $f13) $f52 $f18))
(define-fun $f95 () Bool (and (not $f19) $f94 $f23))
(define-fun $f96 () Bool (and $f23 $f94))
(define-fun $f97 () Bool (and $f9 $f69))
(define-fun $f98 () Bool (and (not $f13) $f97 $f23))
(define-fun $f99 () Bool (and (not $f2) $f98 (not $f1) (not $f51)))
(define-fun $f100 () Bool (and $f87 $f99))
(define-fun $f101 () Bool (and (not $f89) $f100 (not $f90)))
(define-fun $f102 () Bool (and $f19 $f94 $f23))
(define-fun $f103 () Bool (and $f11 $f66))
(define-fun $f104 () Bool (and (not $f13) $f103 $f18))
(define-fun $f105 () Bool (and $f18 $f103 (not $f19)))
(define-fun $f106 () Bool (and (not $f13) $f73))
(define-fun $f107 () Bool (and (not $f19) $f106 $f23))
(define-fun $f108 () Bool (and $f23 $f106))
(define-fun $f109 () Bool (and $f19 $f106 $f23))
(define-fun $f110 () Bool (and $f4 $f2))
(define-fun $f111 () Bool (and $f14 $f110 $f8 $f9))
(define-fun $f112 () Bool (and $f11 $f111))
(define-fun $f113 () Bool (and (not $f13) $f112))
(define-fun $f114 () Bool (and (not $f11) $f98 (not $f1) (not $f51) $f87))
(define-fun $f115 () Bool (and (not $f89) $f114 (not $f90)))
(define-fun $f116 () Bool (and $f9 $f56))
(define-fun $f117 () Bool (and $f11 $f116))
(define-fun $f118 () Bool (and (not $f13) $f117 (not $f1) (not $f51)))
(define-fun $f119 () Bool (and $f87 $f118))
(define-fun $f120 () Bool (and (not $f89) $f119 (not $f90)))
(define-fun $f121 () Bool (and (not $f7) $f79 $f8 $f9 $f19 (not $f2)))
(define-fun $f122 () Bool (and $f13 $f65))
(define-fun $f123 () Bool (and $f15 $f122 $f6))
(define-fun $f124 () Bool (and $f13 $f2 (not $f14)))
(define-fun $f125 () Bool (and (not $f6) $f124))
(define-fun $f126 () Bool (and (not $f7) $f125 $f8 $f9))
(define-fun $f127 () Bool (and (not $f2) $f55))
(define-fun $f128 () Bool (and $f13 $f110 $f14 $f8 $f9))
(define-fun $f129 () Bool (and (not $f19) $f116 (not $f11) (not $f23) (not $f1) (not $f51)))
(define-fun $f130 () Bool (and $f87 $f129))
(define-fun $f131 () Bool (and (not $f89) $f130 (not $f90)))
(define-fun $f132 () Bool (and $f7 $f125))
(define-fun $f133 () Bool (and $f8 $f132))
(define-fun $f134 () Bool (and (not $f2) $f53))
(define-fun $f135 () Bool (and $f9 $f132 $f11 $f19))
(define-fun $f136 () Bool (and $f87 $f135))
(define-fun $f137 () Bool (and (not $f89) $f136 (not $f90)))
(define-fun $f138 () Bool (and $f13 $f4 $f14 $f8 $f9 $f19))
(define-fun $f139 () Bool (and (not $f2) $f138))
(define-fun $f140 () Bool (and (not $f19) $f97 (not $f2)))
(define-fun $f141 () Bool (and (not $f11) $f140 $f39 (not $f23) (not $f1) (not $f51)))
(define-fun $f142 () Bool (and $f87 $f141))
(define-fun $f143 () Bool (and (not $f89) $f142 (not $f90)))
(define-fun $f144 () Bool (and $f18 $f76 (not $f19) (not $f2)))
(define-fun $f145 () Bool (and $f39 $f140 (not $f23) (not $f1) (not $f51)))
(define-fun $f146 () Bool (and $f87 $f145))
(define-fun $f147 () Bool (and (not $f89) $f146 (not $f90)))
(define-fun $f148 () Bool (and (not $f11) $f85 (not $f23) (not $f39)))
(define-fun $f149 () Bool (and $f87 $f148))
(define-fun $f150 () Bool (and (not $f89) $f149 (not $f90)))
(define-fun $f151 () Bool (and (not $f19) $f112))
(define-fun $f152 () Bool (and (not $f19) $f117 (not $f1) (not $f51)))
(define-fun $f153 () Bool (and $f87 $f152))
(define-fun $f154 () Bool (and (not $f89) $f153 (not $f90)))
(define-fun $f155 () Bool (and (not $f6) $f54 (not $f7) $f8 $f9 $f19 $f23))
(define-fun $f156 () Bool (and (not $f14) $f54 (not $f6) $f7))
(define-fun $f157 () Bool (and $f8 $f156))
(define-fun $f158 () Bool (and $f9 $f157 $f19 $f23))
(define-fun $f159 () Bool (and $f15 $f156 $f18 $f19 $f23))
(define-fun $f160 () Bool (and $f14 $f54 (not $f6) $f8 $f9 $f19 $f23))
(define-fun $f161 () Bool (and $f9 $f156 $f19 $f23))
(define-fun $f162 () Bool (and (not $f11) $f161))
(define-fun $f163 () Bool (and $f87 $f162))
(define-fun $f164 () Bool (and (not $f89) $f163 (not $f90)))
(define-fun $f165 () Bool (and $f23 $f138))
(define-fun $f166 () Bool (and (not $f2) $f161))
(define-fun $f167 () Bool (and $f87 $f166))
(define-fun $f168 () Bool (and (not $f89) $f167 (not $f90)))
(define-fun $f169 () Bool (and $f15 $f78 $f6 $f18 $f19 $f23))
(define-fun $f170 () Bool (and (not $f14) $f122 (not $f6) $f7 $f8 $f11))
(define-fun $f171 () Bool (and (not $f13) $f70))
(define-fun $f172 () Bool (and $f18 $f171 $f23))
(define-fun $f173 () Bool (and $f19 $f157 $f23))
(define-fun $f174 () Bool (= nl_0 #b00000000000000000000000000000001))
(define-fun $f175 () Bool (and $f18 $f81 $f19))
(define-fun $f176 () Bool (and $f11 $f57))
(define-fun $f177 () Bool (and (not $f13) $f176))
(define-fun $f178 () Bool (and $f18 $f157 $f19 $f23))
(define-fun $f179 () Bool (and $f23 $f171))
(define-fun $f180 () Bool (and $f11 $f133))
(define-fun $f181 () Bool (and $f19 $f81))
(define-fun $f182 () Bool (and $f18 $f70 (not $f19) (not $f2)))
(define-fun .f10 () Bool (not (not (and (not (and (not $f13) $f12)) true (not (and $f18 $f17 (not $f19))) (not (and (not $f19) $f21)) (not (and (not $f2) $f24)) (not (and (not $f2) $f26)) (not (and (not $f2) $f29)) (not (and (not $f2) $f31)) (not (and (not $f19) $f33)) (not (and (not $f2) $f35)) (not (and (not $f19) $f37)) (not (and (not $f19) $f12)) (not (and (not $f11) $f35)) (not (and (not $f11) $f29)) (not (and (not $f11) $f26)) (not (and (not $f11) $f24)) (not (and (not $f11) $f31)) (not (and (not $f11) $f38 (not $f23) (not $f39))) (not (and (not $f13) $f10 (not $f11) (not $f23))) (not (and (not $f11) $f41 $f39 (not $f23))) (not (and $f39 $f41 (not $f23))) (not (and (not $f23) $f42 (not $f39))) (not (and $f39 $f42 (not $f23))) (not (and (not $f13) $f33)) (not (and (not $f13) $f32 (not $f11) (not $f23))) (not (and (not $f11) $f44 $f39 (not $f23))) (not (and (not $f11) $f40 (not $f23) (not $f39))) (not (and (not $f11) $f43 (not $f23) (not $f39))) (not (and (not $f13) $f36 (not $f11) (not $f23))) (not (and (not $f23) $f44 (not $f39))) (not (and (not $f13) $f20 (not $f11) (not $f23))) (not (and $f39 $f46 (not $f23))) (not (and (not $f11) $f45 (not $f23) (not $f39))) (not (and (not $f23) $f46 (not $f39))) (not (and (not $f13) $f21)) (not (and (not $f11) $f47 (not $f23) (not $f39))) (not (and (not $f13) $f17 $f18)) (not (and (not $f13) $f37)) (not (and (not $f13) $f16 $f18 (not $f11) (not $f23))) (not (and (not $f11) $f48 $f39 (not $f23))) (not (and (not $f23) $f41 (not $f39))) (not (and $f39 $f48 (not $f23))) (not (and $f39 $f44 (not $f23))) (not (and (not $f23) $f48 (not $f39))) (not (and (not $f19) $f50 $f51 (not $f1))) (not (and (not $f11) $f53 (not $f23) (not $f39) $f51 (not $f1))) (not (and (not $f11) $f55 (not $f23) (not $f39))) (not (and (not $f19) $f59 (not $f1) (not $f51))) (not (and $f18 $f61 (not $f19) (not $f1) (not $f51))) (not (and (not $f2) $f64 (not $f23) (not $f39) $f51 (not $f1))) (not (and $f18 $f66 (not $f19) (not $f11) (not $f23) (not $f1) (not $f51))) (not (and (not $f11) $f68 $f51 (not $f1))) (not (and (not $f11) $f72 (not $f1) (not $f51))) (not (and (not $f11) $f74 (not $f23) (not $f39) $f51 (not $f1))) (not (and (not $f11) $f75 (not $f1))) (not (and (not $f11) $f77 (not $f1) (not $f51))) (not (and (not $f11) $f64 (not $f23) (not $f39) $f51 (not $f1))) (not (and (not $f2) $f82 (not $f23) (not $f39))) (not (and (not $f23) $f83 (not $f39) $f51 (not $f1))) (not (and (not $f2) $f84 (not $f23) (not $f39))) (not (and (not $f13) $f50 $f19 (not $f1))) (not (and $f92 $f91 (not $f93))) (not (and (not $f13) $f59 (not $f1) (not $f51))) (not (and (not $f11) $f95 $f51 (not $f1))) (not (and (not $f11) $f96 (not $f1) (not $f51))) (not (and (not $f19) $f71 (not $f2) $f39 (not $f23) (not $f1) (not $f51))) (not (and (not $f2) $f72 (not $f1) (not $f51))) (not (and (not $f2) $f77 (not $f1) (not $f51))) (not (and $f92 $f101 (not $f93))) (not (and $f93 $f101)) (not (and $f89 $f99 $f87 (not $f90))) (not (and (not $f11) $f102 (not $f1))) (not (and (not $f2) $f95 $f51 (not $f1))) (not (and (not $f2) $f96 (not $f1) (not $f51))) (not (and (not $f2) $f102 (not $f1))) (not (and $f90 $f100)) (not (and (not $f19) $f104 $f51 (not $f1))) (not (and (not $f1) $f104 (not $f51))) (not (and $f19 $f104 (not $f1))) (not (and $f51 $f105 (not $f1))) (not (and (not $f11) $f107 $f51 (not $f1))) (not (and (not $f11) $f108 (not $f1) (not $f51))) (not (and (not $f11) $f109 (not $f1))) (not (and (not $f19) $f113 $f51 (not $f1))) (not (and (not $f1) $f113 (not $f51))) (not (and $f92 $f115 (not $f93))) (not (and (not $f2) $f107 $f51 (not $f1))) (not (and (not $f2) $f108 (not $f1) (not $f51))) (not (and $f93 $f115)) (not $f114) (not (and $f92 $f120 (not $f93))) (not (and (not $f11) $f121 $f39 (not $f23))) (not (and (not $f2) $f75 (not $f1))) (not $f100) (not (and (not $f11) $f82 (not $f23) (not $f39))) (not (and (not $f2) $f109 (not $f1))) (not (and $f19 $f113 (not $f1))) (not (and $f93 $f120)) (not (and (not $f19) $f58 (not $f11) (not $f23) (not $f1) (not $f51))) (not (and $f89 $f118 $f87 (not $f90))) (not (and $f90 $f119)) (not $f119) (not (and (not $f13) $f61 $f18 (not $f1) (not $f51))) (not (and (not $f2) $f68 $f51 (not $f1))) (not (and $f11 $f123 $f18 $f19)) (not (and $f39 $f121 (not $f23))) (not (and $f11 $f126 $f19)) (not (and $f19 $f126 (not $f11) (not $f23))) (not (and (not $f23) $f127 (not $f39))) (not (and $f11 $f128 $f19)) (not (and $f92 $f131 (not $f93))) (not (and $f9 $f133 $f11 $f19)) (not (and (not $f11) $f134 $f39 (not $f23) (not $f1) (not $f51))) (not (and $f92 $f137 (not $f93))) (not (and $f93 $f137)) (not (and $f93 $f91)) (not (and (not $f11) $f83 $f39 (not $f23) (not $f1) (not $f51))) (not (and $f89 $f135 $f87 (not $f90))) (not (and $f93 $f131)) (not (and (not $f1) $f105 (not $f51))) (not (and $f89 $f129 $f87 (not $f90))) (not (and $f90 $f136)) (not $f136) (not (and $f90 $f130)) (not (and $f15 $f132 $f11 $f18 $f19)) (not (and $f39 $f139 (not $f23))) (not (and $f89 $f86 $f87 (not $f90))) (not (and (not $f11) $f84 (not $f23) (not $f39))) (not (and $f90 $f88)) (not $f88) (not (and $f92 $f143 (not $f93))) (not $f130) (not (and $f19 $f128 (not $f11) (not $f23))) (not (and $f18 $f60 (not $f19) (not $f11) (not $f23) (not $f1) (not $f51))) (not (and (not $f11) $f144 $f39 (not $f23) (not $f1) (not $f51))) (not (and $f89 $f141 $f87 (not $f90))) (not (and $f93 $f143)) (not (and $f90 $f142)) (not $f142) (not (and $f92 $f147 (not $f93))) (not (and $f92 $f150 (not $f93))) (not (and $f93 $f150)) (not (and $f89 $f148 $f87 (not $f90))) (not (and $f93 $f147)) (not (and $f90 $f149)) (not (and $f51 $f151 (not $f1))) (not $f149) (not (and $f89 $f145 $f87 (not $f90))) (not (and $f92 $f154 (not $f93))) (not (and $f90 $f146)) (not (and $f93 $f154)) (not (and (not $f23) $f134 (not $f39) $f51 (not $f1))) (not (and $f39 $f134 (not $f23) (not $f1) (not $f51))) (not (and $f89 $f152 $f87 (not $f90))) (not (and $f39 $f83 (not $f23) (not $f1) (not $f51))) (not $f146) (not (and $f90 $f153)) (not (and $f39 $f144 (not $f23) (not $f1) (not $f51))) (not $f153) (not (and (not $f19) $f111 (not $f11) (not $f23) (not $f1) (not $f51))) (not (and (not $f11) $f138 (not $f23) (not $f39))) (not (and (not $f23) $f139 (not $f39))) (not (and (not $f1) $f151 (not $f51))) (not (and (not $f2) $f155)) (not (and $f39 $f127 (not $f23))) (not (and $f18 $f123 $f19 (not $f11) (not $f23))) (not (and (not $f6) $f122 (not $f7) $f8 $f9 $f11 $f19)) (not (and (not $f11) $f155)) (not (and (not $f11) $f158)) (not (and (not $f11) $f159)) (not (and (not $f2) $f160)) (not (and (not $f11) $f160)) (not (and $f15 $f124 $f6 $f11 $f18 $f19)) (not (and $f92 $f164 (not $f93))) (not (and $f93 $f164)) (not (and $f14 $f122 (not $f6) $f8 $f9 $f11 $f19)) (not (and (not $f2) $f158)) (not (and $f89 $f162 $f87 (not $f90))) (not (and $f90 $f163)) (not $f163) (not (and (not $f11) $f165)) (not (and $f92 $f168 (not $f93))) (not (and (not $f11) $f169)) (not (and $f93 $f168)) (not (and (not $f2) $f169)) (not (and $f89 $f166 $f87 (not $f90))) (not (and $f90 $f167)) (not $f167) (not (and (not $f2) $f165)) (not (and (not $f2) $f159)) (not (and $f18 $f170 $f19)) (not (and (not $f2) $f172 (not $f1) (not $f51))) (not (and (not $f11) $f173 $f174)) (not (and $f19 $f170 $f174)) (not (and (not $f2) $f173 $f174)) (not (and (not $f11) $f175 (not $f23) (not $f39))) (not (and (not $f1) $f177 (not $f51) $f174)) (not (and (not $f2) $f178)) (not (and (not $f11) $f179 (not $f1) (not $f51) $f174)) (not (and (not $f11) $f178)) (not (and $f18 $f57 (not $f19) (not $f11) (not $f23) (not $f1) (not $f51))) (not (and (not $f11) $f172 (not $f1) (not $f51))) (not (and $f18 $f177 (not $f1) (not $f51))) (not (and (not $f2) $f179 (not $f1) (not $f51) $f174)) (not (and $f19 $f180 $f174)) (not (and $f18 $f176 (not $f19) (not $f1) (not $f51))) (not (and (not $f2) $f181 (not $f23) (not $f39) $f174)) (not (and (not $f19) $f176 (not $f1) (not $f51) $f174)) (not (and (not $f11) $f182 $f39 (not $f23) (not $f1) (not $f51))) (not (and (not $f2) $f175 (not $f23) (not $f39))) (not (and (not $f19) $f70 (not $f2) $f39 (not $f23) (not $f1) (not $f51) $f174)) (not (and (not $f11) $f181 (not $f23) (not $f39) $f174)) (not (and $f18 $f180 $f19)) (not (and (not $f19) $f57 (not $f11) (not $f23) (not $f1) (not $f51) $f174)) (not (and $f39 $f182 (not $f23) (not $f1) (not $f51)))))))
(assert (! .f10 :interpolation-group .g1))

(declare-fun next_clk_1 () (_ BitVec 1))
(declare-fun next_clk_2 () (_ BitVec 1))
(declare-fun next_clk_3 () (_ BitVec 1))
(declare-fun next_clk_4 () (_ BitVec 1))
(declare-fun next_nl_1 () (_ BitVec 32))
(declare-fun next_nl_0 () (_ BitVec 32))
(declare-fun next_nloss_1 () (_ BitVec 1))
(declare-fun next_nloss_0 () (_ BitVec 1))
(define-fun .f11 () Bool (not (= nloss_0 next_nloss_0)))
(define-fun .f12 () Bool (not (= nloss_1 next_nloss_1)))
(define-fun .f13 () Bool (not (= nl_0 next_nl_0)))
(define-fun .f14 () Bool (not (= nl_1 next_nl_1)))
(define-fun .f15 () Bool (not (= clk_4 next_clk_4)))
(define-fun .f16 () Bool (not (= clk_3 next_clk_3)))
(define-fun .f17 () Bool (not (= clk_2 next_clk_2)))
(define-fun .f18 () Bool (not (= clk_1 next_clk_1)))
(assert (! .f11 :interpolation-group .g1))
(assert (! .f12 :interpolation-group .g1))
(assert (! .f13 :interpolation-group .g1))
(assert (! .f14 :interpolation-group .g1))
(assert (! .f15 :interpolation-group .g1))
(assert (! .f16 :interpolation-group .g1))
(assert (! .f17 :interpolation-group .g1))
(assert (! .f18 :interpolation-group .g1))

(check-sat)
(get-interpolant (.g0))
