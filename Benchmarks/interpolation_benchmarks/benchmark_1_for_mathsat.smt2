;; MathSAT API call trace
;; generated on Mon Oct 10 14:21:33 2016
(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")
(reset-assertions)


(declare-fun CLK_1 () (_ BitVec 1))
(declare-fun CLK_2 () (_ BitVec 1))
(declare-fun CLK_3 () (_ BitVec 1))
(declare-fun COUNT_1 () (_ BitVec 4))
(declare-fun COUNT_2 () (_ BitVec 4))
(declare-fun DIN_1 () (_ BitVec 16))
(declare-fun DOUT_1 () (_ BitVec 16))
(declare-fun DOUT_0 () (_ BitVec 16))
(declare-fun EOC_1 () (_ BitVec 1))
(declare-fun EOC_2 () (_ BitVec 1))
(declare-fun EOC_3 () (_ BitVec 1))
(declare-fun EOC_4 () (_ BitVec 1))
(declare-fun FLG_1 () (_ BitVec 1))
(declare-fun FLG_2 () (_ BitVec 1))
(declare-fun FLG_3 () (_ BitVec 1))
(declare-fun RESET_1 () (_ BitVec 1))
(declare-fun RESET_2 () (_ BitVec 1))
(declare-fun RESET_3 () (_ BitVec 1))
(declare-fun RESET_4 () (_ BitVec 1))
(declare-fun VLDEOC_1 () (_ BitVec 1))
(declare-fun VLDEOC_0 () (_ BitVec 1))
(define-fun $e1 () Bool (= CLK_1 CLK_2))
(define-fun $e2 () Bool (and (= RESET_1 RESET_2) $e1))
(define-fun $e3 () Bool (= RESET_1 #b1))
(define-fun $e4 () Bool (and (= CLK_1 #b1) (not $e1)))
(define-fun $e5 () Bool (= DOUT_0 DOUT_1))
(define-fun $e6 () Bool (= CLK_2 CLK_3))
(define-fun $e7 () Bool (= RESET_2 RESET_3))
(define-fun $e8 () Bool (= EOC_2 EOC_3))
(define-fun $e9 () Bool (= RESET_2 #b1))
(define-fun $e10 () Bool (= FLG_2 #b1))
(define-fun $e11 () Bool (= COUNT_1 COUNT_2))
(define-fun $e12 () Bool (= EOC_3 EOC_4))
(define-fun $e13 () Bool (= FLG_2 FLG_3))
(define-fun $e14 () Bool (= FLG_1 #b1))
(define-fun $e15 () Bool (= VLDEOC_0 VLDEOC_1))
(define-fun $e16 () Bool (= FLG_1 FLG_2))

(define-fun .f1 () Bool (ite (not (and (= RESET_3 RESET_4) $e12)) (ite (= RESET_3 #b1) (= FLG_2 #b0) (ite (and (= EOC_3 #b1) (not $e12)) $e10 $e13)) $e13))
(define-fun .f2 () Bool (ite (not (and $e7 $e6 $e8)) (ite (not (and (not (= EOC_2 #b0)) (not $e9))) (= COUNT_1 #b0000) (ite (and (= CLK_2 #b1) (not $e6)) (ite $e10 (ite (bvult #b0111 COUNT_2) $e11 (= COUNT_1 (bvadd COUNT_2 #b0001))) $e11) $e11)) $e11))
(define-fun .f3 () Bool (ite (not $e2) (ite $e3 (= DOUT_0 #b0000000000000000) (ite $e4 (ite (and (= EOC_1 #b1) (= COUNT_1 #b0101)) (= DOUT_0 DIN_1) $e5) $e5)) $e5))
(define-fun .f4 () Bool (ite (not (and $e7 $e8)) (ite $e9 (= FLG_1 #b0) (ite (and (= EOC_2 #b1) (not $e8)) $e14 $e16)) $e16))
(define-fun .f5 () Bool (ite (not (and (= EOC_1 EOC_2) $e2)) (ite (not (and (not (= EOC_1 #b0)) (not $e3))) (= VLDEOC_0 #b0) (ite $e4 (ite $e14 (ite (bvult #b0111 COUNT_1) (= VLDEOC_0 #b1) $e15) $e15) $e15)) $e15))

(assert (! .f1 :interpolation-group .g0))
(assert (! .f2 :interpolation-group .g0))
(assert (! .f3 :interpolation-group .g0))
(assert (! .f4 :interpolation-group .g0))
(assert (! .f5 :interpolation-group .g0))

(define-fun $f1 () Bool (= (bvadd RESET_1 RESET_2) #b0))
(define-fun $f2 () Bool (= (bvadd CLK_1 CLK_2) #b0))
(define-fun $f3 () Bool (and $f2 $f1))
(define-fun $f4 () Bool (= (bvadd DOUT_0 (bvmul #b1111111111111111 DOUT_1)) #b0000000000000000))
(define-fun $f5 () Bool (and $f4 $f3))
(define-fun $f6 () Bool (= (bvadd CLK_2 CLK_3) #b0))
(define-fun $f7 () Bool (= (bvadd RESET_2 RESET_3) #b0))
(define-fun $f8 () Bool (= (bvadd EOC_2 EOC_3) #b0))
(define-fun $f9 () Bool (and $f6 $f5 $f7 $f8))
(define-fun $f10 () Bool (= (bvadd EOC_3 EOC_4) #b0))
(define-fun $f11 () Bool (= (bvadd RESET_3 RESET_4) #b0))
(define-fun $f12 () Bool (and $f10 $f9 $f11))
(define-fun $f13 () Bool (= (bvadd EOC_1 EOC_2) #b0))
(define-fun $f14 () Bool (= (bvadd VLDEOC_0 VLDEOC_1) #b0))
(define-fun $f15 () Bool (= EOC_2 #b0))
(define-fun $f16 () Bool (and $f15 $f5 $f10 $f11))
(define-fun $f17 () Bool (= RESET_2 #b1))
(define-fun $f18 () Bool (= EOC_2 #b1))
(define-fun $f19 () Bool (= RESET_3 #b1))
(define-fun $f20 () Bool (= EOC_3 #b1))
(define-fun $f21 () Bool (= EOC_1 #b0))
(define-fun $f22 () Bool (= VLDEOC_0 #b0))
(define-fun $f23 () Bool (and $f14 $f16 (not $f17) (not $f18) (not $f8) (not $f13)))
(define-fun $f24 () Bool (= CLK_1 #b1))
(define-fun $f25 () Bool (= RESET_1 #b1))
(define-fun $f26 () Bool (and $f14 $f9 (not $f19) (not $f20) (not $f10) (not $f13)))
(define-fun $f27 () Bool (and $f14 $f12 (not $f13)))
(define-fun $f28 () Bool (and $f4 $f24))
(define-fun $f29 () Bool (and $f6 $f28 $f7 $f8))
(define-fun $f30 () Bool (and $f10 $f29 $f11))
(define-fun $f31 () Bool (and $f14 $f30))
(define-fun $f32 () Bool (= EOC_1 #b1))
(define-fun $f33 () Bool (and $f15 $f28 $f10 $f11))
(define-fun $f34 () Bool (and $f15 $f4 $f10 $f11))
(define-fun $f35 () Bool (and $f6 $f4 $f7 $f8))
(define-fun $f36 () Bool (and $f10 $f35 $f11))
(define-fun $f37 () Bool (and $f14 $f36))
(define-fun $f38 () Bool (and $f21 $f36 $f22))
(define-fun $f39 () Bool (and $f7 $f5 $f8))
(define-fun $f40 () Bool (and $f10 $f39 $f11))
(define-fun $f41 () Bool (= CLK_2 #b1))
(define-fun $f42 () Bool (and $f7 $f4 $f8))
(define-fun $f43 () Bool (and $f41 $f42 $f10 $f11))
(define-fun $f44 () Bool (and $f41 $f39 $f10 $f11))
(define-fun $f45 () Bool (and $f7 $f28 $f8))
(define-fun $f46 () Bool (and $f10 $f45 $f11))
(define-fun $f47 () Bool (and $f15 $f42))
(define-fun $f48 () Bool (and $f15 $f39))
(define-fun $f49 () Bool (and $f10 $f48 $f11))
(define-fun $f50 () Bool (and $f14 $f49 (not $f13)))
(define-fun $f51 () Bool (and $f15 $f45))
(define-fun $f52 () Bool (and $f10 $f51 $f11))
(define-fun $f53 () Bool (and $f10 $f47 $f11))
(define-fun $f54 () Bool (and $f14 $f48 (not $f19) (not $f20) (not $f10) (not $f13)))
(define-fun $f55 () Bool (and $f17 $f39))
(define-fun $f56 () Bool (and $f10 $f55 $f11))
(define-fun $f57 () Bool (and $f25 $f3 $f4))
(define-fun $f58 () Bool (and $f17 $f57 $f15))
(define-fun $f59 () Bool (= DOUT_0 #b0000000000000000))
(define-fun $f60 () Bool (and $f59 $f25))
(define-fun $f61 () Bool (and $f7 $f60 $f8))
(define-fun $f62 () Bool (and $f15 $f61))
(define-fun $f63 () Bool (and $f19 $f62))
(define-fun $f64 () Bool (and $f10 $f62 $f11))
(define-fun $f65 () Bool (and $f21 $f64 $f22))
(define-fun $f66 () Bool (and $f6 $f60 $f7 $f8))
(define-fun $f67 () Bool (and $f10 $f66 $f11))
(define-fun $f68 () Bool (and $f17 $f61))
(define-fun $f69 () Bool (and $f19 $f68))
(define-fun $f70 () Bool (and $f22 $f67))
(define-fun $f71 () Bool (and $f17 $f60))
(define-fun $f72 () Bool (and $f10 $f68 $f11))
(define-fun $f73 () Bool (and $f17 $f5))
(define-fun $f74 () Bool (and $f15 $f73))
(define-fun $f75 () Bool (and $f22 $f64 (not $f13)))
(define-fun $f76 () Bool (and $f19 $f66))
(define-fun $f77 () Bool (and $f21 $f76 $f22 (not $f10)))
(define-fun $f78 () Bool (and $f15 $f71 $f19))
(define-fun $f79 () Bool (and $f6 $f57 $f7 $f8))
(define-fun $f80 () Bool (and $f7 $f57 $f8 $f15))
(define-fun $f81 () Bool (and $f22 $f76 (not $f10)))
(define-fun $f82 () Bool (and $f19 $f71))
(define-fun $f83 () Bool (and $f19 $f55))
(define-fun $f84 () Bool (and $f10 $f73 $f11))
(define-fun $f85 () Bool (and $f19 $f73))
(define-fun $f86 () Bool (and $f41 $f61 $f10 $f11))
(define-fun $f87 () Bool (and $f10 $f61 $f11))
(define-fun $f88 () Bool (and $f4 $f2))
(define-fun $f89 () Bool (and $f6 $f88 $f7 $f8 $f10 $f11))
(define-fun $f90 () Bool (and $f15 $f60 $f10 $f11))
(define-fun $f91 () Bool (and $f32 $f24 (= (bvadd DIN_1 (bvmul #b1111111111111111 DOUT_0)) #b0000000000000000)))
(define-fun $f92 () Bool (and $f6 $f91))
(define-fun $f93 () Bool (and $f7 $f92))
(define-fun $f94 () Bool (and $f8 $f93))
(define-fun $f95 () Bool (and $f10 $f94))
(define-fun $f96 () Bool (ite $f21 $f22 $f14))
(define-fun $f97 () Bool (ite $f19 false $f96))
(define-fun $f98 () Bool (ite $f17 false (ite $f15 false $f96)))
(define-fun $f99 () Bool (and (not $f25) $f24 (not $f2)))
(define-fun $f100 () Bool (= VLDEOC_0 #b1))
(define-fun $f101 () Bool (ite $f21 $f22 (ite $f100 true $f14)))
(define-fun $f102 () Bool (ite $f19 $f96 $f101))
(define-fun $f103 () Bool (ite $f10 (ite $f11 $f101 $f102) $f102))
(define-fun $f104 () Bool (ite $f19 (ite $f21 $f22 (ite $f100 (ite $f14 true $f18) $f14)) $f101))
(define-fun $f105 () Bool (ite $f17 $f96 (ite $f15 $f96 (ite $f10 (ite $f11 $f101 $f104) $f104))))
(define-fun $f106 () Bool (ite $f8 (ite $f17 $f96 (ite $f15 $f96 $f103)) $f105))
(define-fun $f107 () Bool (ite $f4 $f96 false))
(define-fun $f108 () Bool (ite $f59 $f22 false))
(define-fun .f6 () Bool (not (not (and (not (and $f13 $f12 $f14)) (not (and $f13 $f16 $f14 (not $f17) (not $f18) (not $f8))) (not (and $f13 $f9 $f14 (not $f19) (not $f20) (not $f10))) (not (and $f21 $f12 $f22 (not $f13))) (not (and (not $f24) $f23 (not $f25) (not $f21))) (not (and (not $f24) $f26 (not $f25) (not $f21))) (not (and (not $f24) $f27 (not $f25) (not $f21))) (not (and (not $f13) $f31 (not $f25) (not $f21) (not $f2))) (not (and $f14 $f29 (not $f19) (not $f20) (not $f10) (not $f13) (not $f25) (not $f21) (not $f2))) (not (and $f21 $f29 $f22 (not $f19) (not $f20) (not $f10) (not $f25) (not $f2) (not $f32))) (not (and $f21 $f30 $f22 (not $f25) (not $f2) (not $f32))) (not (and $f14 $f33 (not $f17) (not $f18) (not $f8) (not $f13) (not $f25) (not $f21) (not $f2))) (not (and $f21 $f33 $f22 (not $f17) (not $f18) (not $f8) (not $f25) (not $f2) (not $f32))) (not (and (not $f25) $f31 (not $f21) (not $f2))) (not (and $f21 $f34 $f22 (not $f17) (not $f18) (not $f8) (not $f24) (not $f25) (not $f2))) (not (and $f14 $f34 (not $f17) (not $f18) (not $f8) (not $f13) (not $f24) (not $f25) (not $f21) (not $f2))) (not (and (not $f25) $f23 (not $f21))) (not (and (not $f25) $f26 (not $f21))) (not (and $f14 $f35 (not $f19) (not $f20) (not $f10) (not $f13) (not $f24) (not $f25) (not $f21) (not $f2))) (not (and $f21 $f35 $f22 (not $f19) (not $f20) (not $f10) (not $f24) (not $f25) (not $f2))) (not (and (not $f13) $f37 (not $f24) (not $f25) (not $f21) (not $f2))) (not (and (not $f25) $f27 (not $f21))) (not (and (not $f24) $f38 (not $f25) (not $f2))) (not (and (not $f24) $f37 (not $f25) (not $f21) (not $f2))) (not (and $f21 $f40 $f22 (not $f17) (not $f13) (not $f41) (not $f6) (not $f15))) (not (and $f14 $f43 (not $f17) (not $f24) (not $f25) (not $f21) (not $f2) (not $f6) (not $f15))) (not (and $f21 $f43 $f22 (not $f17) (not $f13) (not $f24) (not $f25) (not $f2) (not $f6) (not $f15))) (not (and $f21 $f44 $f22 (not $f17) (not $f13) (not $f6) (not $f15))) (not (and $f14 $f46 (not $f17) (not $f25) (not $f21) (not $f2) (not $f41) (not $f6) (not $f15))) (not (and $f13 $f44 $f14 (not $f17) (not $f6) (not $f15))) (not (and $f14 $f47 (not $f19) (not $f20) (not $f10) (not $f13) (not $f24) (not $f25) (not $f21) (not $f2) (not $f6))) (not (and (not $f24) $f50 (not $f25) (not $f21) (not $f6))) (not (and $f13 $f40 $f14 (not $f17) (not $f41) (not $f6) (not $f15))) (not (and $f13 $f49 $f14 (not $f6))) (not (and (not $f25) $f50 (not $f21) (not $f6))) (not (and $f21 $f46 $f22 (not $f17) (not $f13) (not $f25) (not $f2) (not $f32) (not $f41) (not $f6) (not $f15))) (not (and $f13 $f48 $f14 (not $f19) (not $f20) (not $f10) (not $f6))) (not (and $f14 $f52 (not $f13) (not $f25) (not $f21) (not $f2) (not $f6))) (not (and $f14 $f53 (not $f13) (not $f24) (not $f25) (not $f21) (not $f2) (not $f6))) (not (and (not $f24) $f54 (not $f25) (not $f21) (not $f6))) (not (and $f14 $f51 (not $f19) (not $f20) (not $f10) (not $f13) (not $f25) (not $f21) (not $f2) (not $f6))) (not (and $f21 $f53 $f22 (not $f24) (not $f25) (not $f2) (not $f6))) (not (and (not $f25) $f54 (not $f21) (not $f6))) (not (and $f21 $f51 $f22 (not $f19) (not $f20) (not $f10) (not $f25) (not $f2) (not $f32) (not $f6))) (not (and $f21 $f52 $f22 (not $f25) (not $f2) (not $f32) (not $f6))) (not (and $f21 $f47 $f22 (not $f19) (not $f20) (not $f10) (not $f24) (not $f25) (not $f2) (not $f6))) (not (and $f21 $f56 $f22 (not $f13) (not $f6))) (not (and $f10 $f58 $f11 $f22 (not $f8) (not $f13))) (not (and $f21 $f63 $f22 (not $f10) (not $f2) (not $f6))) (not (and (not $f2) $f65 (not $f6))) (not (and $f21 $f67 $f22 (not $f2))) (not (and $f21 $f69 $f22 (not $f10) (not $f13) (not $f2) (not $f6))) (not (and (not $f13) $f70 (not $f2))) (not (and $f10 $f71 $f11 $f22 (not $f8) (not $f2))) (not (and $f21 $f72 $f22 (not $f13) (not $f2) (not $f6))) (not (and $f10 $f74 $f11 $f13 $f14 (not $f8))) (not (and $f19 $f58 $f22 (not $f8) (not $f10) (not $f13))) (not (and (not $f2) $f75 (not $f6))) (not (and (not $f13) $f77 (not $f2))) (not (and $f19 $f74 $f13 $f14 (not $f8) (not $f10))) (not (and $f21 $f78 $f22 (not $f8) (not $f10) (not $f2))) (not (and $f22 $f63 (not $f10) (not $f13) (not $f2) (not $f6))) (not (and $f10 $f79 $f11 $f22 (not $f13))) (not (and $f19 $f80 $f22 (not $f10) (not $f13) (not $f6))) (not (and $f22 $f78 (not $f8) (not $f10) (not $f13) (not $f2))) (not (and $f19 $f9 $f13 $f14 (not $f10))) (not (and $f19 $f79 $f22 (not $f10) (not $f13))) (not (and (not $f13) $f81 (not $f2))) (not (and $f22 $f69 (not $f10) (not $f2) (not $f6))) (not (and (not $f2) $f77)) (not (and $f21 $f82 $f22 (not $f8) (not $f10) (not $f13) (not $f2))) (not (and $f21 $f83 $f22 (not $f10) (not $f13) (not $f6))) (not (and $f19 $f48 $f13 $f14 (not $f10) (not $f6))) (not (and $f10 $f80 $f11 $f22 (not $f13) (not $f6))) (not (and $f21 $f84 $f22 (not $f8) (not $f13))) (not (and $f22 $f82 (not $f8) (not $f10) (not $f2))) (not (and $f13 $f84 $f14 (not $f8))) (not (and $f13 $f83 $f14 (not $f10) (not $f6))) (not (and $f21 $f85 $f22 (not $f8) (not $f10) (not $f13))) (not (and (not $f2) $f70)) (not (and $f13 $f56 $f14 (not $f6))) (not (and $f13 $f85 $f14 (not $f8) (not $f10))) (not (and $f22 $f72 (not $f2) (not $f6))) (not (and (not $f2) $f81)) (not (and (not $f13) $f38 (not $f24) (not $f25) (not $f1))) (not (and $f21 $f66 $f22 (not $f19) (not $f20) (not $f10) (not $f1))) (not (and $f21 $f86 $f22 (not $f17) (not $f13) (not $f6) (not $f15) (not $f1))) (not (and $f22 $f62 (not $f19) (not $f20) (not $f10) (not $f13) (not $f6) (not $f1))) (not (and $f21 $f87 $f22 (not $f17) (not $f13) (not $f41) (not $f6) (not $f15) (not $f1))) (not (and $f22 $f66 (not $f19) (not $f20) (not $f10) (not $f13) (not $f1))) (not (and $f14 $f89 (not $f13) (not $f25) (not $f21) (not $f1))) (not (and $f22 $f87 (not $f17) (not $f41) (not $f6) (not $f15) (not $f1))) (not (and $f22 $f86 (not $f17) (not $f6) (not $f15) (not $f1))) (not (and (not $f1) $f70)) (not (and $f7 $f88 $f8 $f17 $f10 $f11 $f21 $f22 (not $f13) (not $f25) (not $f6) (not $f1))) (not (and (not $f6) $f65 (not $f1))) (not (and $f21 $f89 $f22 (not $f25) (not $f1))) (not (and $f17 $f4 $f19 $f21 $f22 (not $f8) (not $f10) (not $f13) (not $f24) (not $f25) (not $f1))) (not (and $f22 $f90 (not $f17) (not $f18) (not $f8) (not $f13) (not $f1))) (not (and (not $f6) $f75 (not $f1))) (not (and $f21 $f90 $f22 (not $f17) (not $f18) (not $f8) (not $f1))) (not (and $f11 $f95 (not $f25) (not $f21) (not $f2) $f14)) (not (and (not $f25) $f95 (not $f2) (not $f11) $f97)) (not (and (not $f10) $f94 (not $f25) (not $f2) $f97)) (not (and (not $f25) $f94 (not $f2) (ite $f10 $f96 (ite $f19 $f96 (ite $f20 false $f96))))) (not (and (not $f8) $f93 (not $f25) (not $f2) $f98)) (not (and (not $f25) $f92 (not $f2) (not $f7) $f98)) (not (and (not $f25) $f91 (not $f2) (not $f6) $f98)) (not (and (not $f32) $f99 (ite $f4 (ite $f6 (ite $f7 (ite $f8 $f96 $f98) $f98) $f98) false))) (not (and $f99 (ite $f4 (ite $f6 (ite $f7 (ite $f8 $f103 $f105) $f106) $f106) false))) (not (and (not $f25) (not $f24) (not $f2) $f107)) (not (and (not $f2) $f25 $f108)) (not (and $f2 (ite $f1 (ite $f25 (ite $f4 (ite $f13 $f14 $f22) false) (ite $f4 (ite $f13 $f14 $f96) false)) (ite $f25 $f108 $f107)))) true))))

(assert (! .f6 :interpolation-group .g1))

(declare-fun next_DOUT_1 () (_ BitVec 16))
(declare-fun next_DOUT_0 () (_ BitVec 16))
(declare-fun next_EOC_1 () (_ BitVec 1))
(declare-fun next_EOC_2 () (_ BitVec 1))
(declare-fun next_EOC_3 () (_ BitVec 1))
(declare-fun next_EOC_4 () (_ BitVec 1))
(declare-fun next_RESET_1 () (_ BitVec 1))
(declare-fun next_RESET_2 () (_ BitVec 1))
(declare-fun next_RESET_3 () (_ BitVec 1))
(declare-fun next_RESET_4 () (_ BitVec 1))
(declare-fun next_VLDEOC_1 () (_ BitVec 1))
(declare-fun next_VLDEOC_0 () (_ BitVec 1))
(define-fun .f7 () Bool (and (not (= VLDEOC_0 next_VLDEOC_0)) (not (= VLDEOC_1 next_VLDEOC_1)) (= RESET_4 next_RESET_4) (= RESET_3 next_RESET_3) (= RESET_2 next_RESET_2) (= RESET_1 next_RESET_1) (not (= EOC_4 next_EOC_4)) (not (= EOC_3 next_EOC_3))  (not (= EOC_2 next_EOC_2)) (not (= EOC_1 next_EOC_1)) (not (bvult next_DOUT_0 DOUT_0)) (bvult next_DOUT_1 DOUT_1)))
(assert (! .f7 :interpolation-group .g1))


(check-sat)
(get-interpolant (.g0))
