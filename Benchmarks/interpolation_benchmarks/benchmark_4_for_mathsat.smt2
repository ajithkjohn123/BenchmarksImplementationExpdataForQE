;; MathSAT API call trace
;; generated on Mon Oct 10 14:21:33 2016
(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")

(reset-assertions)
(declare-fun clk_1 () (_ BitVec 1))
(declare-fun clk_2 () (_ BitVec 1))
(declare-fun clk_3 () (_ BitVec 1))
(declare-fun clk_4 () (_ BitVec 1))
(declare-fun clk_5 () (_ BitVec 1))
(declare-fun clk_cnt_2 () (_ BitVec 32))
(declare-fun clk_cnt_3 () (_ BitVec 32))
(declare-fun data_in_2 () (_ BitVec 16))
(declare-fun data_in_4 () (_ BitVec 16))
(declare-fun fpga_alive_cnt_0 () (_ BitVec 16))
(declare-fun fpga_alive_dis_1 () (_ BitVec 1))
(declare-fun fpga_alive_dis_2 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_1 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_0 () (_ BitVec 1))
(declare-fun fpga_alive_reg_1 () (_ BitVec 16))
(declare-fun fpga_alive_reg_2 () (_ BitVec 16))
(declare-fun fpga_alive_reg_3 () (_ BitVec 16))
(declare-fun fpga_alive_reg_4 () (_ BitVec 16))
(declare-fun autoname_1 () (_ BitVec 16))
(declare-fun autoname_2 () (_ BitVec 16))
(declare-fun autoname_3 () (_ BitVec 16))
(declare-fun autoname_4 () (_ BitVec 16))
(declare-fun fpga_alive_reg_written_2 () (_ BitVec 1))
(declare-fun fpga_alive_reg_written_3 () (_ BitVec 1))
(declare-fun fpga_rst_1 () (_ BitVec 1))
(declare-fun fpga_rst_0 () (_ BitVec 1))
(declare-fun reset_1 () (_ BitVec 1))
(declare-fun reset_2 () (_ BitVec 1))
(declare-fun reset_3 () (_ BitVec 1))
(declare-fun reset_4 () (_ BitVec 1))
(declare-fun reset_5 () (_ BitVec 1))
(declare-fun s_clk_cnt_2 () (_ BitVec 32))
(declare-fun s_clk_cnt_3 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_2 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_3 () (_ BitVec 32))
(declare-fun s_fpga_alive_reg_3 () (_ BitVec 16))
(declare-fun s_fpga_alive_reg_4 () (_ BitVec 16))
(declare-fun sel_fpga_alive_reg_2 () (_ BitVec 1))
(declare-fun sel_fpga_alive_reg_3 () (_ BitVec 1))
(declare-fun sel_fpga_alive_reg_4 () (_ BitVec 1))
(declare-fun sfpga_alive_1 () (_ BitVec 1))
(declare-fun sfpga_alive_2 () (_ BitVec 1))
(declare-fun state_fpga_alive_gen_pulse_2 () (_ BitVec 4))
(declare-fun state_fpga_alive_gen_pulse_3 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_2 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_3 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_4 () (_ BitVec 4))
(declare-fun wr_2 () (_ BitVec 1))
(declare-fun wr_3 () (_ BitVec 1))
(declare-fun wr_4 () (_ BitVec 1))
(define-fun $e1 () Bool (= clk_2 clk_3))
(define-fun $e2 () Bool (and (= reset_2 reset_3) $e1))
(define-fun $e3 () Bool (= reset_2 #b1))
(define-fun $e4 () Bool (and (= clk_2 #b1) (not $e1)))
(define-fun $e5 () Bool (= state_fpga_alive_reg_2 #b0000))
(define-fun $e6 () Bool (= fpga_alive_reg_1 fpga_alive_reg_2))
(define-fun $e7 () Bool (= clk_3 clk_4))
(define-fun $e8 () Bool (and (= reset_3 reset_4) $e7))
(define-fun $e9 () Bool (= reset_3 #b1))
(define-fun $e10 () Bool (and (= clk_3 #b1) (not $e7)))
(define-fun $e11 () Bool (= state_fpga_alive_reg_3 #b0000))
(define-fun $e12 () Bool (= wr_3 #b1))
(define-fun $e13 () Bool (= sel_fpga_alive_reg_3 #b1))
(define-fun $e14 () Bool (= state_fpga_alive_reg_2 state_fpga_alive_reg_3))
(define-fun $e15 () Bool (= state_fpga_alive_reg_3 #b0001))
(define-fun $e16 () Bool (= state_fpga_alive_reg_2 #b0010))
(define-fun $e17 () Bool (= state_fpga_alive_reg_3 #b0010))
(define-fun $e18 () Bool (= clk_1 clk_2))
(define-fun $e19 () Bool (= fpga_rst_0 fpga_rst_1))
(define-fun $e20 () Bool (= sfpga_alive_1 sfpga_alive_2))
(define-fun $e21 () Bool (= sfpga_alive_1 #b1))
(define-fun $e22 () Bool (= autoname_1 autoname_2))
(define-fun $e23 () Bool (= state_fpga_alive_gen_pulse_3 #b0000))
(define-fun $e24 () Bool (= fpga_alive_reg_written_3 #b1))
(define-fun $e25 () Bool (= autoname_3 autoname_4))
(define-fun $e26 () Bool (= clk_4 clk_5))
(define-fun $e27 () Bool (and (= reset_4 reset_5) $e26))
(define-fun $e28 () Bool (= reset_4 #b1))
(define-fun $e29 () Bool (and (= clk_4 #b1) (not $e26)))
(define-fun $e30 () Bool (= state_fpga_alive_reg_4 #b0000))
(define-fun $e31 () Bool (= wr_4 #b1))
(define-fun $e32 () Bool (= sel_fpga_alive_reg_4 #b1))
(define-fun $e33 () Bool (= fpga_alive_reg_3 fpga_alive_reg_4))
(define-fun $e34 () Bool (= fpga_alive_reg_written_2 fpga_alive_reg_written_3))
(define-fun $e35 () Bool (= s_clk_cnt_2 #b00000000000000000000000000000000))
(define-fun $e36 () Bool (= state_fpga_alive_gen_pulse_3 #b0001))
(define-fun $e37 () Bool (= s_clk_cnt_2 s_clk_cnt_3))
(define-fun $e38 () Bool (= s_clk_cnt_default_2 #b00000000000000000000000000000000))
(define-fun $e39 () Bool (= s_clk_cnt_default_2 s_clk_cnt_default_3))
(define-fun $e40 () Bool (= state_fpga_alive_gen_pulse_3 #b0010))
(define-fun $e41 () Bool (bvult #b00000000000000010011100010000000 s_clk_cnt_default_3))
(define-fun $e42 () Bool (= s_fpga_alive_reg_3 s_fpga_alive_reg_4))
(define-fun $e43 () Bool (= state_fpga_alive_reg_4 #b0001))
(define-fun $e44 () Bool (= state_fpga_alive_gen_pulse_2 #b0000))
(define-fun $e45 () Bool (= state_fpga_alive_gen_pulse_2 #b0001))
(define-fun $e46 () Bool (= sfpga_alive_1 #b0))
(define-fun $e47 () Bool (= state_fpga_alive_gen_pulse_2 #b0010))
(define-fun $e48 () Bool (= state_fpga_alive_gen_pulse_2 state_fpga_alive_gen_pulse_3))
(define-fun $e49 () Bool (= state_fpga_alive_reg_3 state_fpga_alive_reg_4))
(define-fun .f1 () Bool   (ite (not (and (= reset_1 reset_2) $e18)) (ite (= reset_1 #b1) (= fpga_rst_0 #b0) (ite (and (= clk_1 #b1) (not $e18)) (= fpga_rst_0 #b1) $e19)) $e19))
(define-fun .f2 () Bool   (ite (not $e8) (ite $e9 $e5 (ite $e10 (ite $e11 (ite $e12 (ite $e13 (= state_fpga_alive_reg_2 #b0001) $e14) $e14) (ite $e15 $e16 (ite $e17 $e16 $e5))) $e14)) $e14))
(define-fun .f3 () Bool   (ite (not $e2) (ite $e3 (= fpga_alive_reg_1 #b0000000000000000) (ite $e4 (ite $e5 (ite (= wr_2 #b1) (ite (= sel_fpga_alive_reg_2 #b1) (= fpga_alive_reg_1 data_in_2) $e6) $e6) $e6) $e6)) $e6))
(define-fun .f4 () Bool   (= fpga_alive_cnt_0 fpga_alive_reg_1))
(define-fun .f5 () Bool   (ite (not $e27) (ite $e28 $e11 (ite $e29 (ite $e30 (ite $e31 (ite $e32 $e15 $e49) $e49) (ite $e43 $e17 (ite (= state_fpga_alive_reg_4 #b0010) $e17 $e11))) $e49)) $e49))
(define-fun .f6 () Bool   (ite (not $e8) (ite $e9 $e44 (ite $e10 (ite $e23 (ite $e24 $e45 $e47) (ite $e36 $e45 (ite $e40 (ite (not $e41) $e47 (ite $e24 $e44 $e48)) $e44))) $e48)) $e48))
(define-fun .f7 () Bool   (ite (not $e2) (ite $e3 $e21 (ite $e4 (ite $e44 $e21 (ite $e45 (ite (bvult clk_cnt_2 s_clk_cnt_2) $e46 $e21) (ite $e47 (ite (not (bvult #b00000000000000010011100010000000 s_clk_cnt_default_2)) $e46 $e21) $e20))) $e20)) $e20))
(define-fun .f8 () Bool   (ite (not $e27) (ite $e28 (= s_fpga_alive_reg_3 #b0000000000000000) (ite $e29 (ite $e30 $e42 (ite $e43 (ite (not (bvult #b0000000000000000 fpga_alive_reg_4)) (= s_fpga_alive_reg_3 #b0000000000000010) (= s_fpga_alive_reg_3 fpga_alive_reg_4)) $e42)) $e42)) $e42))
(define-fun .f9 () Bool   (ite (not $e8) (ite $e9 $e38 (ite $e10 (ite $e23 $e38 (ite $e36 $e39 (ite $e40 (ite (not $e41) $e38 (= s_clk_cnt_default_2 (bvadd s_clk_cnt_default_3 #b00000000000000000000000000000001))) $e39))) $e39)) $e39))
(define-fun .f10 () Bool   (ite (not $e8) (ite $e9 $e35 (ite $e10 (ite $e23 $e35 (ite $e36 (ite (bvult clk_cnt_3 s_clk_cnt_3) $e35 (= s_clk_cnt_2 (bvadd s_clk_cnt_3 #b00000000000000000000000000000001))) $e37)) $e37)) $e37))
(define-fun .f11 () Bool   (ite (not $e8) (ite $e9 (= fpga_alive_reg_written_2 #b0) (ite $e10 (ite $e11 (ite $e12 (ite $e13 (= fpga_alive_reg_written_2 #b1) $e34) $e34) $e34) $e34)) $e34))
(define-fun .f12 () Bool   (ite (not $e27) (ite $e28 (= fpga_alive_reg_3 #b0000000000000000) (ite $e29 (ite $e30 (ite $e31 (ite $e32 (= fpga_alive_reg_3 data_in_4) $e33) $e33) $e33) $e33)) $e33))
(define-fun .f13 () Bool   (ite (not $e8) (and $e25 (ite $e9 $e22 (ite $e10 (ite $e23 (ite $e24 (= autoname_1 (bvmul #b1001110001000000 s_fpga_alive_reg_3)) $e22) $e22) $e22))) (and $e25)))
(define-fun .f14 () Bool   (ite (not (and (= fpga_alive_dis_1 fpga_alive_dis_2) $e20)) (ite (and $e21 (= fpga_alive_dis_1 #b0)) (= fpga_alive_pulse_0 #b1) (= fpga_alive_pulse_0 #b0)) (= fpga_alive_pulse_0 fpga_alive_pulse_1)))

(assert (! .f1 :interpolation-group .g0))
(assert (! .f2 :interpolation-group .g0))
(assert (! .f3 :interpolation-group .g0))
(assert (! .f4 :interpolation-group .g0))
(assert (! .f5 :interpolation-group .g0))
(assert (! .f6 :interpolation-group .g0))
(assert (! .f7 :interpolation-group .g0))
(assert (! .f8 :interpolation-group .g0))
(assert (! .f9 :interpolation-group .g0))
(assert (! .f10 :interpolation-group .g0))
(assert (! .f11 :interpolation-group .g0))
(assert (! .f12 :interpolation-group .g0))
(assert (! .f13 :interpolation-group .g0))
(assert (! .f14 :interpolation-group .g0))


(define-fun $f1 () Bool (= reset_3 #b1))
(define-fun $f2 () Bool (= (bvadd clk_1 clk_2) #b0))
(define-fun $f3 () Bool (= (bvadd reset_1 reset_2) #b0))
(define-fun $f4 () Bool (= (bvadd fpga_rst_0 fpga_rst_1) #b0))
(define-fun $f5 () Bool (= (bvadd fpga_alive_dis_1 fpga_alive_dis_2) #b0))
(define-fun $f6 () Bool (= (bvadd fpga_alive_pulse_0 fpga_alive_pulse_1) #b0))
(define-fun $f7 () Bool (and $f2 $f1 $f3 $f4 $f5 $f6))
(define-fun $f8 () Bool (= (bvadd clk_4 clk_5) #b0))
(define-fun $f9 () Bool (and $f8 $f7))
(define-fun $f10 () Bool (= (bvadd reset_4 reset_5) #b0))
(define-fun $f11 () Bool (= reset_2 #b1))
(define-fun $f12 () Bool (= clk_2 #b1))
(define-fun $f13 () Bool (and $f10 $f9 (not $f11) (not $f12)))
(define-fun $f14 () Bool (= (bvadd reset_3 reset_4) #b0))
(define-fun $f15 () Bool (= (bvadd reset_2 reset_3) #b0))
(define-fun $f16 () Bool (= (bvadd clk_2 clk_3) #b0))
(define-fun $f17 () Bool (and $f15 $f16 $f1))
(define-fun $f18 () Bool (and $f2 $f17))
(define-fun $f19 () Bool (and $f3 $f18 $f4 $f5 $f6))
(define-fun $f20 () Bool (and $f8 $f19))
(define-fun $f21 () Bool (and $f10 $f20))
(define-fun $f22 () Bool (= (bvadd clk_3 clk_4) #b0))
(define-fun $f23 () Bool (= reset_4 #b1))
(define-fun $f24 () Bool (and $f23 $f19 (not $f22)))
(define-fun $f25 () Bool (and (not $f14) $f19))
(define-fun $f26 () Bool (= clk_4 #b1))
(define-fun $f27 () Bool (and $f1 $f16))
(define-fun $f28 () Bool (and $f2 $f27 $f3 $f4 $f5 $f6))
(define-fun $f29 () Bool (and $f8 $f28))
(define-fun $f30 () Bool (and $f10 $f29 (not $f11)))
(define-fun $f31 () Bool (= wr_4 #b1))
(define-fun $f32 () Bool (and (not $f11) $f28 (not $f14) (not $f15)))
(define-fun $f33 () Bool (and $f23 $f28 (not $f11) (not $f15) (not $f22)))
(define-fun $f34 () Bool (and (not $f11) $f7 (not $f12) (not $f14) (not $f15)))
(define-fun $f35 () Bool (and $f23 $f7 (not $f11) (not $f12) (not $f15) (not $f22)))
(define-fun $f36 () Bool (= clk_1 #b1))
(define-fun $f37 () Bool (= fpga_rst_0 #b1))
(define-fun $f38 () Bool (and $f36 $f1 $f37))
(define-fun $f39 () Bool (and $f5 $f38 $f6))
(define-fun $f40 () Bool (and $f23 $f39 (not $f11) (not $f12) (not $f15) (not $f22)))
(define-fun $f41 () Bool (= reset_1 #b1))
(define-fun $f42 () Bool (= fpga_rst_0 #b0))
(define-fun $f43 () Bool (and $f41 $f27 $f42 $f5 $f6))
(define-fun $f44 () Bool (and $f23 $f43 (not $f11) (not $f15) (not $f22)))
(define-fun $f45 () Bool (and $f4 $f27 $f5 $f6))
(define-fun $f46 () Bool (and $f41 $f1 $f42))
(define-fun $f47 () Bool (and $f5 $f46 $f6))
(define-fun $f48 () Bool (and (not $f11) $f47 (not $f12) (not $f14) (not $f15)))
(define-fun $f49 () Bool (and $f23 $f47 (not $f11) (not $f12) (not $f15) (not $f22)))
(define-fun $f50 () Bool (and (not $f11) $f39 (not $f12) (not $f14) (not $f15)))
(define-fun $f51 () Bool (and (not $f11) $f43 (not $f14) (not $f15)))
(define-fun $f52 () Bool (and (not $f11) $f45 (not $f14) (not $f15)))
(define-fun $f53 () Bool (and $f23 $f45 (not $f11) (not $f15) (not $f22)))
(define-fun $f54 () Bool (and $f41 $f17 $f42 $f5 $f6))
(define-fun $f55 () Bool (and (not $f14) $f54))
(define-fun $f56 () Bool (and $f4 $f17 $f5 $f6))
(define-fun $f57 () Bool (and (not $f14) $f56))
(define-fun $f58 () Bool (and $f23 $f54 (not $f22)))
(define-fun $f59 () Bool (and $f8 $f54 $f10))
(define-fun $f60 () Bool (and $f4 $f18 $f5 $f6))
(define-fun $f61 () Bool (and (not $f14) $f60))
(define-fun $f62 () Bool (and $f23 $f56 (not $f22)))
(define-fun $f63 () Bool (and $f23 $f60 (not $f22)))
(define-fun $f64 () Bool (and $f8 $f60 $f10))
(define-fun $f65 () Bool (and $f1 $f11))
(define-fun $f66 () Bool (and $f4 $f65))
(define-fun $f67 () Bool (= fpga_alive_dis_1 #b0))
(define-fun $f68 () Bool (= fpga_alive_pulse_0 #b1))
(define-fun $f69 () Bool (and $f67 $f66 $f68))
(define-fun $f70 () Bool (= fpga_alive_cnt_0 #b0000000000000000))
(define-fun $f71 () Bool (and $f41 $f65 $f42))
(define-fun $f72 () Bool (= fpga_alive_pulse_0 #b0))
(define-fun $f73 () Bool (and $f72 $f71))
(define-fun $f74 () Bool (and $f36 $f65 $f37))
(define-fun $f75 () Bool (and $f72 $f74))
(define-fun $f76 () Bool (and $f67 $f71 $f68))
(define-fun $f77 () Bool (and $f2 $f65 $f3 $f4))
(define-fun $f78 () Bool (and $f72 $f66))
(define-fun $f79 () Bool (and (not $f14) $f78))
(define-fun $f80 () Bool (and $f23 $f76 (not $f22)))
(define-fun $f81 () Bool (and $f72 $f46))
(define-fun $f82 () Bool (and $f67 $f74 $f68 (not $f14)))
(define-fun $f83 () Bool (and $f23 $f81 (not $f11) (not $f12) (not $f15) (not $f22)))
(define-fun $f84 () Bool (= (bvadd data_in_2 (bvmul #b1111111111111111 fpga_alive_cnt_0)) #b0000000000000000))
(define-fun $f85 () Bool (ite $f6 $f84 false))
(define-fun $f86 () Bool (ite $f72 $f84 $f85))
(define-fun $f87 () Bool (ite $f72 $f84 false))
(define-fun $f88 () Bool (ite $f5 (ite $f67 (ite $f68 $f84 $f86) $f86) (ite $f67 (ite $f68 $f84 $f87) $f87)))
(define-fun $f89 () Bool (ite $f4 $f88 false))
(define-fun $f90 () Bool (ite $f42 $f88 false))
(define-fun $f91 () Bool (ite $f2 (ite $f3 $f89 (ite $f41 $f90 $f89)) (ite $f41 $f90 (ite $f36 (ite $f37 $f88 false) $f89))))
(define-fun $f92 () Bool (= wr_2 #b1))
(define-fun $f93 () Bool (and $f92 $f12))
(define-fun $f94 () Bool (= sel_fpga_alive_reg_2 #b1))
(define-fun $f95 () Bool (and $f94 $f93))
(define-fun $f96 () Bool (= clk_3 #b1))
(define-fun $f97 () Bool (ite $f5 (ite $f67 (ite $f68 $f84 $f85) $f86) (ite $f67 (ite $f68 $f84 false) $f87)))
(define-fun $f98 () Bool (ite $f4 $f97 false))
(define-fun $f99 () Bool (ite $f42 $f97 false))
(define-fun $f100 () Bool (ite $f2 (ite $f3 $f98 (ite $f41 $f99 $f98)) (ite $f41 $f99 (ite $f36 (ite $f37 $f97 false) $f98))))
(define-fun $f101 () Bool (ite $f72 true $f6))
(define-fun $f102 () Bool (ite $f67 (ite $f68 true $f72) $f72))
(define-fun $f103 () Bool (ite $f5 (ite $f67 (ite $f68 true $f101) $f101) $f102))
(define-fun $f104 () Bool (ite $f4 $f103 false))
(define-fun $f105 () Bool (ite $f42 $f103 false))
(define-fun $f106 () Bool (ite $f2 (ite $f3 $f104 (ite $f41 $f105 $f104)) (ite $f41 $f105 (ite $f36 (ite $f37 $f103 false) $f104))))
(define-fun $f107 () Bool (ite $f5 (ite $f67 (ite $f68 true $f6) $f101) (ite $f67 $f68 $f72)))
(define-fun $f108 () Bool (ite $f4 $f107 false))
(define-fun $f109 () Bool (ite $f42 $f107 false))
(define-fun $f110 () Bool (ite $f2 (ite $f3 $f108 (ite $f41 $f109 $f108)) (ite $f41 $f109 (ite $f36 (ite $f37 $f107 false) $f108))))
(define-fun $f111 () Bool (= wr_3 #b1))
(define-fun $f112 () Bool (= sel_fpga_alive_reg_3 #b1))
(define-fun $f113 () Bool (ite $f10 true (not $f23)))
(define-fun $f114 () Bool (ite $f8 $f113 (ite $f23 false (not $f26))))
(define-fun $f115 () Bool (ite $f72 $f114 (ite $f6 $f114 false)))
(define-fun $f116 () Bool (ite $f72 $f114 false))
(define-fun $f117 () Bool (ite $f5 (ite $f67 (ite $f68 $f114 $f115) $f115) (ite $f67 (ite $f68 $f114 $f116) $f116)))
(define-fun $f118 () Bool (ite $f4 $f117 false))
(define-fun $f119 () Bool (ite $f42 $f117 false))
(define-fun $f120 () Bool (ite $f22 (ite $f14 $f106 (ite $f1 $f110 $f106)) (ite $f1 $f110 (ite $f96 (ite $f111 (ite $f112 (ite $f2 (ite $f3 $f118 (ite $f41 $f119 $f118)) (ite $f41 $f119 (ite $f36 (ite $f37 $f117 false) $f118))) $f106) $f106) $f106))))
(define-fun $f121 () Bool (and (not $f11) $f12 (not $f16)))
(define-fun $f122 () Bool (ite $f8 $f113 (not $f23)))
(define-fun $f123 () Bool (ite $f72 $f122 (ite $f6 $f122 false)))
(define-fun $f124 () Bool (ite $f72 $f122 false))
(define-fun $f125 () Bool (ite $f5 (ite $f67 (ite $f68 $f122 $f123) $f123) (ite $f67 (ite $f68 $f122 $f124) $f124)))
(define-fun $f126 () Bool (ite $f4 $f125 false))
(define-fun $f127 () Bool (ite $f42 $f125 false))
(define-fun $f128 () Bool (ite $f2 (ite $f3 $f126 (ite $f41 $f127 $f126)) (ite $f41 $f127 (ite $f36 (ite $f37 $f125 false) $f126))))
(define-fun $f129 () Bool (ite $f5 $f6 $f102))
(define-fun $f130 () Bool (ite $f4 $f129 false))
(define-fun $f131 () Bool (ite $f42 $f129 false))
(define-fun $f132 () Bool (ite $f2 (ite $f3 $f130 (ite $f41 $f131 $f130)) (ite $f41 $f131 (ite $f36 (ite $f37 $f129 false) $f130))))
(define-fun $f133 () Bool (ite $f70 $f110 false))
(define-fun .f15 () Bool  (not (not (and (not (and (not $f14) $f13 (not $f15))) (not (and (not $f22) $f21)) (not (and (not $f8) $f24)) (not (and (not $f10) $f24)) (not (and (not $f8) $f25 (not $f23) (not $f26))) (not (and (not $f10) $f25 (not $f23) (not $f26))) (not (and (not $f14) $f30 (not $f15))) (not (and $f26 $f19 (not $f14) (not $f8) (not $f23) (not $f31))) (not (and (not $f15) $f13 (not $f22))) (not (and (not $f8) $f32 (not $f23) (not $f26))) (not (and (not $f15) $f30 (not $f22))) (not (and (not $f14) $f21)) (not (and (not $f8) $f33)) (not (and (not $f10) $f34 (not $f23) (not $f26))) (not (and (not $f10) $f32 (not $f23) (not $f26))) (not (and (not $f10) $f35)) (not (and (not $f10) $f33)) (not (and (not $f8) $f34 (not $f23) (not $f26))) (not (and (not $f8) $f35)) (not (and (not $f10) $f40 (not $f2) (not $f41))) (not (and (not $f10) $f44 (not $f3))) (not (and $f8 $f45 $f10 (not $f11) (not $f15) (not $f22) (not $f2) (not $f41) (not $f36))) (not (and $f8 $f39 $f10 (not $f11) (not $f12) (not $f15) (not $f22) (not $f2) (not $f41))) (not (and $f8 $f47 $f10 (not $f11) (not $f12) (not $f15) (not $f22) (not $f3))) (not (and $f8 $f43 $f10 (not $f11) (not $f15) (not $f22) (not $f3))) (not (and (not $f10) $f48 (not $f23) (not $f26) (not $f3))) (not (and (not $f10) $f49 (not $f3))) (not (and (not $f8) $f49 (not $f3))) (not (and (not $f8) $f40 (not $f2) (not $f41))) (not (and (not $f10) $f50 (not $f23) (not $f26) (not $f2) (not $f41))) (not (and (not $f10) $f51 (not $f23) (not $f26) (not $f3))) (not (and (not $f8) $f48 (not $f23) (not $f26) (not $f3))) (not (and (not $f8) $f50 (not $f23) (not $f26) (not $f2) (not $f41))) (not (and (not $f10) $f52 (not $f23) (not $f26) (not $f2) (not $f41) (not $f36))) (not (and (not $f10) $f53 (not $f2) (not $f41) (not $f36))) (not (and (not $f8) $f51 (not $f23) (not $f26) (not $f3))) (not (and (not $f8) $f52 (not $f23) (not $f26) (not $f2) (not $f41) (not $f36))) (not (and (not $f10) $f55 (not $f23) (not $f26) (not $f2))) (not (and (not $f8) $f55 (not $f23) (not $f26) (not $f2))) (not (and (not $f14) $f20 (not $f10) (not $f23))) (not (and (not $f8) $f44 (not $f3))) (not (and (not $f8) $f53 (not $f2) (not $f41) (not $f36))) (not (and (not $f10) $f57 (not $f23) (not $f26) (not $f41) (not $f3) (not $f36))) (not (and (not $f10) $f58 (not $f2))) (not (and (not $f8) $f58 (not $f2))) (not (and (not $f14) $f59 (not $f2))) (not (and (not $f8) $f57 (not $f23) (not $f26) (not $f41) (not $f3) (not $f36))) (not (and (not $f10) $f61 (not $f23) (not $f26) (not $f41) (not $f3))) (not (and (not $f10) $f62 (not $f41) (not $f3) (not $f36))) (not (and (not $f22) $f59 (not $f2))) (not (and (not $f10) $f63 (not $f41) (not $f3))) (not (and $f8 $f56 $f10 (not $f22) (not $f41) (not $f3) (not $f36))) (not (and (not $f14) $f64 (not $f41) (not $f3))) (not (and (not $f22) $f64 (not $f41) (not $f3))) (not (and (not $f8) $f61 (not $f23) (not $f26) (not $f41) (not $f3))) (not (and (not $f8) $f62 (not $f41) (not $f3) (not $f36))) (not (and (not $f8) $f63 (not $f41) (not $f3))) (not (and $f8 $f69 $f10 (not $f22) (not $f41) (not $f3) (not $f36) (not $f16) $f70)) (not (and $f8 $f73 $f10 (not $f22) (not $f2) (not $f16) (not $f67) $f70)) (not (and (not $f14) $f75 (not $f8) (not $f23) (not $f26) (not $f2) (not $f41) (not $f3) (not $f16) (not $f67) $f70)) (not (and $f23 $f69 (not $f22) (not $f10) (not $f41) (not $f3) (not $f36) (not $f16) $f70)) (not (and $f8 $f76 $f10 (not $f22) (not $f2) (not $f16) $f70)) (not (and $f23 $f75 (not $f22) (not $f10) (not $f2) (not $f41) (not $f3) (not $f16) (not $f67) $f70)) (not (and $f26 $f7 (not $f11) (not $f12) (not $f14) (not $f15) (not $f8) (not $f23) (not $f31))) (not (and $f72 $f77 $f23 (not $f22) (not $f10) (not $f16) (not $f67) $f70)) (not (and (not $f8) $f79 (not $f23) (not $f26) (not $f41) (not $f3) (not $f36) (not $f16) (not $f67) $f70)) (not (and $f67 $f38 $f68 (not $f11) (not $f12) (not $f14) (not $f15) (not $f10) (not $f23) (not $f26) (not $f2) (not $f41) (not $f5))) (not (and (not $f10) $f80 (not $f2) (not $f16) $f70)) (not (and $f67 $f77 $f68 $f23 (not $f22) (not $f10) (not $f16) $f70)) (not (and (not $f14) $f73 (not $f10) (not $f23) (not $f26) (not $f2) (not $f16) (not $f67) $f70)) (not (and $f8 $f81 $f10 (not $f11) (not $f12) (not $f14) (not $f15) (not $f3) (not $f67) (not $f5))) (not (and $f26 $f28 (not $f11) (not $f14) (not $f15) (not $f8) (not $f23) (not $f31))) (not (and (not $f10) $f82 (not $f23) (not $f26) (not $f2) (not $f41) (not $f3) (not $f16) $f70)) (not (and (not $f10) $f83 (not $f3) (not $f67) (not $f5))) (not (and $f8 $f78 $f10 (not $f14) (not $f41) (not $f3) (not $f36) (not $f16) (not $f67) $f70)) (not (and (not $f11) $f9 (not $f12) (not $f14) (not $f15) (not $f10) (not $f23))) (not (and $f23 $f73 (not $f22) (not $f8) (not $f2) (not $f16) (not $f67) $f70)) (not (and (not $f8) $f83 (not $f3) (not $f67) (not $f5))) (not (and $f23 $f78 (not $f22) (not $f10) (not $f41) (not $f3) (not $f36) (not $f16) (not $f67) $f70)) (not (and (not $f8) $f80 (not $f2) (not $f16) $f70)) (not (and (not $f10) $f79 (not $f23) (not $f26) (not $f41) (not $f3) (not $f36) (not $f16) (not $f67) $f70)) (not (and (not $f14) $f69 (not $f10) (not $f23) (not $f26) (not $f41) (not $f3) (not $f36) (not $f16) $f70)) (not (and $f72 $f38 (not $f11) (not $f12) (not $f14) (not $f15) (not $f10) (not $f23) (not $f26) (not $f2) (not $f41) (not $f67) (not $f5))) (not (and (not $f11) $f29 (not $f14) (not $f15) (not $f10) (not $f23))) (not (and (not $f14) $f76 (not $f8) (not $f23) (not $f26) (not $f2) (not $f16) $f70)) (not (and (not $f8) $f82 (not $f23) (not $f26) (not $f2) (not $f41) (not $f3) (not $f16) $f70)) (not (and (not $f96) $f95 (not $f11) (not $f22) (not $f16) (not $f1) $f91)) (not (and $f1 $f95 (not $f11) (not $f22) (not $f16) $f100)) (not (and $f22 $f95 (not $f11) (not $f16) (ite $f14 $f91 (ite $f1 $f100 $f91)))) (not (and (not $f11) $f93 (not $f16) (not $f94) $f120)) (not (and (not $f92) $f121 $f120)) (not (and $f121 (ite $f22 (ite $f14 $f128 (ite $f1 false $f128)) (ite $f1 false (ite $f96 (ite $f111 (ite $f112 $f106 $f128) $f128) $f128))))) (not (and (not $f12) (not $f11) (not $f16) $f132)) (not (and (not $f16) $f11 $f133)) (not (and $f16 (ite $f15 $f132 (ite $f11 $f133 $f132)))) true))))
(assert (! .f15 :interpolation-group .g1))

(declare-fun next_clk_1 () (_ BitVec 1))
(declare-fun next_clk_2 () (_ BitVec 1))
(declare-fun next_clk_3 () (_ BitVec 1))
(declare-fun next_clk_4 () (_ BitVec 1))
(declare-fun next_clk_5 () (_ BitVec 1))
(declare-fun next_data_in_2 () (_ BitVec 16))
(declare-fun next_data_in_4 () (_ BitVec 16))
(declare-fun next_fpga_alive_cnt_0 () (_ BitVec 16))
(declare-fun next_wr_2 () (_ BitVec 1))
(declare-fun next_wr_3 () (_ BitVec 1))
(declare-fun next_wr_4 () (_ BitVec 1))
(define-fun .f16 () Bool   (not (= wr_4 next_wr_4)))
(define-fun .f17 () Bool   (not (= wr_3 next_wr_3)))
(define-fun .f18 () Bool   (not (= wr_2 next_wr_2)))
(define-fun .f19 () Bool   (not (= clk_5 next_clk_5)))
(define-fun .f20 () Bool   (not (= clk_4 next_clk_4)))
(define-fun .f21 () Bool   (not (= clk_3 next_clk_3)))
(define-fun .f22 () Bool   (not (= clk_2 next_clk_2)))
(define-fun .f23 () Bool   (not (= clk_1 next_clk_1)))
(define-fun .f24 () Bool   (not (bvult next_fpga_alive_cnt_0 fpga_alive_cnt_0)))
(define-fun .f25 () Bool   (bvult (bvadd next_data_in_4 next_data_in_2) (bvadd data_in_4 data_in_2)))

(assert (! .f16 :interpolation-group .g1))
(assert (! .f17 :interpolation-group .g1))
(assert (! .f18 :interpolation-group .g1))
(assert (! .f19 :interpolation-group .g1))
(assert (! .f20 :interpolation-group .g1))
(assert (! .f21 :interpolation-group .g1))
(assert (! .f22 :interpolation-group .g1))
(assert (! .f23 :interpolation-group .g1))
(assert (! .f24 :interpolation-group .g1))
(assert (! .f25 :interpolation-group .g1))


(check-sat)
(get-interpolant (.g0))
