;; MathSAT API call trace
;; generated on Mon Oct 10 14:21:33 2016
(set-option :global-decls true)
(set-option :config "verbosity=0")
(set-option :config "proof_generation=true")
(set-option :config "interpolation=true")
(set-option :config "model_generation=true")
(set-option :config "bool_model_generation=false")
(set-option :config "unsat_core_generation=0")
(set-option :config "random_seed=91648253")
(set-option :config "debug.dump_theory_lemmas=false")
(set-option :config "debug.solver_enabled=true")
(set-option :config "printer.bv_number_format=0")
(set-option :config "printer.fp_number_format=1")
(set-option :config "printer.defines_prefix=")
(set-option :config "preprocessor.toplevel_propagation=false")
(set-option :config "preprocessor.toplevel_propagation_limit=0")
(set-option :config "preprocessor.simplification=1")
(set-option :config "preprocessor.ite_minimization=false")
(set-option :config "preprocessor.ite_minimization_call_limit=150000")
(set-option :config "preprocessor.interpolation_ite_elimination=true")
(set-option :config "preprocessor.partial_nnf_conversion=false")
(set-option :config "dpll.restart_strategy=0")
(set-option :config "dpll.restart_initial=200")
(set-option :config "dpll.restart_geometric_factor=1.5")
(set-option :config "dpll.store_tlemmas=false")
(set-option :config "dpll.branching_random_frequency=0")
(set-option :config "dpll.branching_initial_phase=0")
(set-option :config "dpll.branching_cache_phase=2")
(set-option :config "dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "dpll.branching_random_ignore_polarity=true")
(set-option :config "dpll.ghost_filtering=true")
(set-option :config "dpll.minimize_model=false")
(set-option :config "dpll.allsat_minimize_model=false")
(set-option :config "dpll.allsat_allow_duplicates=false")
(set-option :config "dpll.pop_btpoint_reset_var_order=false")
(set-option :config "dpll.glucose_var_activity=false")
(set-option :config "dpll.glucose_learnt_minimization=false")
(set-option :config "dpll.interpolation_mode=0")
(set-option :config "dpll.proof_simplification=false")
(set-option :config "dpll.preprocessor.mode=0")
(set-option :config "dpll.preprocessor.clause_size_limit=20")
(set-option :config "dpll.preprocessor.subsumption_size_limit=1000")
(set-option :config "dpll.preprocessor.elimination_grow_limit=0")
(set-option :config "dpll.preprocessor.elimination_phase=1")
(set-option :config "dpll.preprocessor.elimination_recent_vars_only=false")
(set-option :config "dpll.preprocessor.try_reelimination=true")
(set-option :config "theory.eq_propagation=true")
(set-option :config "theory.interface_eq_policy=2")
(set-option :config "theory.pairwise_interface_eq=true")
(set-option :config "theory.pure_literal_filtering=false")
(set-option :config "theory.euf.enabled=true")
(set-option :config "theory.euf.dyn_ack=0")
(set-option :config "theory.euf.dyn_ack_threshold=1")
(set-option :config "theory.euf.dyn_ack_limit=1000")
(set-option :config "theory.la.enabled=true")
(set-option :config "theory.la.split_rat_eq=false")
(set-option :config "theory.la.delay_alien=false")
(set-option :config "theory.la.pivoting_greedy_threshold=0")
(set-option :config "theory.la.lazy_expl_threshold=10")
(set-option :config "theory.la.interpolation_laz_use_floor=true")
(set-option :config "theory.la.pure_equality_filtering=true")
(set-option :config "theory.la.detect_euf_fragment=false")
(set-option :config "theory.la.deduction_enabled=true")
(set-option :config "theory.la.laz_equality_elimination=true")
(set-option :config "theory.la.laz_internal_branch_and_bound=true")
(set-option :config "theory.la.laz_internal_branch_and_bound_limit=1")
(set-option :config "theory.la.laz_cuts_from_proofs_mode=3")
(set-option :config "theory.la.laz_enabled=true")
(set-option :config "theory.la.laz_unit_cube_test=true")
(set-option :config "theory.la.interpolation_mode=0")
(set-option :config "theory.bv.enabled=true")
(set-option :config "theory.bv.div_by_zero_mode=0")
(set-option :config "theory.bv.delay_propagated_eqs=true")
(set-option :config "theory.bv.eager=false")
(set-option :config "theory.bv.bit_blast_mode=0")
(set-option :config "theory.bv.interpolation_mode=0")
(set-option :config "theory.bv.proof_simplification=false")
(set-option :config "theory.bv.lazydpll.restart_strategy=0")
(set-option :config "theory.bv.lazydpll.restart_initial=200")
(set-option :config "theory.bv.lazydpll.restart_geometric_factor=1.5")
(set-option :config "theory.bv.lazydpll.branching_random_frequency=0")
(set-option :config "theory.bv.lazydpll.branching_initial_phase=0")
(set-option :config "theory.bv.lazydpll.branching_cache_phase=2")
(set-option :config "theory.bv.lazydpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.bv.lazydpll.branching_random_ignore_polarity=true")
(set-option :config "theory.bv.lazydpll.ghost_filtering=false")
(set-option :config "theory.bv.lazydpll.glucose_var_activity=false")
(set-option :config "theory.bv.lazydpll.glucose_learnt_minimization=false")
(set-option :config "theory.arr.enabled=true")
(set-option :config "theory.arr.mode=0")
(set-option :config "theory.arr.lazy_lemmas=true")
(set-option :config "theory.arr.check_on_approx=false")
(set-option :config "theory.arr.auto_wr_lemma=true")
(set-option :config "theory.arr.enable_wr_lemmas=true")
(set-option :config "theory.arr.enable_row_lemmas=true")
(set-option :config "theory.arr.enable_ext_lemmas=true")
(set-option :config "theory.arr.max_wr_lemmas=0")
(set-option :config "theory.arr.max_row_lemmas=0")
(set-option :config "theory.arr.max_ext_lemmas=0")
(set-option :config "theory.arr.enable_ext_polarity=true")
(set-option :config "theory.arr.enable_ext_arg=true")
(set-option :config "theory.arr.enable_witness=false")
(set-option :config "theory.arr.enable_nonlinear=true")
(set-option :config "theory.arr.enable_nonlinear_strat=false")
(set-option :config "theory.arr.enable_foreign=false")
(set-option :config "theory.arr.permanent_lemma_inst=false")
(set-option :config "theory.fp.enabled=true")
(set-option :config "theory.fp.minmax_zero_mode=1")
(set-option :config "theory.fp.mode=1")
(set-option :config "theory.fp.bv_combination_enabled=true")
(set-option :config "theory.fp.bit_blast_mode=2")
(set-option :config "theory.fp.dpll.restart_strategy=3")
(set-option :config "theory.fp.dpll.restart_initial=200")
(set-option :config "theory.fp.dpll.restart_geometric_factor=1.5")
(set-option :config "theory.fp.dpll.branching_random_frequency=0.01")
(set-option :config "theory.fp.dpll.branching_initial_phase=0")
(set-option :config "theory.fp.dpll.branching_cache_phase=1")
(set-option :config "theory.fp.dpll.branching_random_invalidate_phase_cache=false")
(set-option :config "theory.fp.dpll.branching_random_ignore_polarity=true")
(set-option :config "theory.fp.dpll.ghost_filtering=false")
(set-option :config "theory.fp.dpll.glucose_var_activity=true")
(set-option :config "theory.fp.dpll.glucose_learnt_minimization=true")
(set-option :config "theory.fp.acdcl_conflict_generalization=2")
(set-option :config "theory.fp.interpolation_mode=0")
(set-option :config "theory.fp.acdcl_single_propagation_limit=0")
(set-option :config "theory.fp.acdcl_single_generalization_limit=0")
(set-option :config "theory.fp.acdcl_generalization_fair=true")

(reset-assertions)
(declare-fun clk_1 () (_ BitVec 1))
(declare-fun clk_2 () (_ BitVec 1))
(declare-fun clk_3 () (_ BitVec 1))
(declare-fun clk_4 () (_ BitVec 1))
(declare-fun clk_5 () (_ BitVec 1))
(declare-fun data_in_2 () (_ BitVec 16))
(declare-fun data_in_3 () (_ BitVec 16))
(declare-fun data_in_4 () (_ BitVec 16))
(declare-fun fpga_alive_cnt_0 () (_ BitVec 16))
(declare-fun fpga_alive_dis_1 () (_ BitVec 1))
(declare-fun fpga_alive_dis_2 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_1 () (_ BitVec 1))
(declare-fun fpga_alive_pulse_0 () (_ BitVec 1))
(declare-fun fpga_alive_reg_1 () (_ BitVec 16))
(declare-fun fpga_alive_reg_2 () (_ BitVec 16))
(declare-fun fpga_alive_reg_3 () (_ BitVec 16))
(declare-fun fpga_alive_reg_4 () (_ BitVec 16))
(declare-fun fpga_alive_reg_written_2 () (_ BitVec 1))
(declare-fun fpga_alive_reg_written_3 () (_ BitVec 1))
(declare-fun fpga_rst_1 () (_ BitVec 1))
(declare-fun fpga_rst_0 () (_ BitVec 1))
(declare-fun reset_1 () (_ BitVec 1))
(declare-fun reset_2 () (_ BitVec 1))
(declare-fun reset_3 () (_ BitVec 1))
(declare-fun reset_4 () (_ BitVec 1))
(declare-fun reset_5 () (_ BitVec 1))
(declare-fun s_clk_cnt_2 () (_ BitVec 32))
(declare-fun s_clk_cnt_3 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_2 () (_ BitVec 32))
(declare-fun s_clk_cnt_default_3 () (_ BitVec 32))
(declare-fun sel_fpga_alive_reg_2 () (_ BitVec 1))
(declare-fun sel_fpga_alive_reg_3 () (_ BitVec 1))
(declare-fun sel_fpga_alive_reg_4 () (_ BitVec 1))
(declare-fun sfpga_alive_1 () (_ BitVec 1))
(declare-fun sfpga_alive_2 () (_ BitVec 1))
(declare-fun state_fpga_alive_gen_pulse_2 () (_ BitVec 4))
(declare-fun state_fpga_alive_gen_pulse_3 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_2 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_3 () (_ BitVec 4))
(declare-fun state_fpga_alive_reg_4 () (_ BitVec 4))
(define-fun $e1 () Bool (= clk_1 clk_2))
(define-fun $e2 () Bool (= fpga_rst_0 fpga_rst_1))
(define-fun $e3 () Bool (= clk_2 clk_3))
(define-fun $e4 () Bool (and (= reset_2 reset_3) $e3))
(define-fun $e5 () Bool (= reset_2 #b1))
(define-fun $e6 () Bool (and (= clk_2 #b1) (not $e3)))
(define-fun $e7 () Bool (= state_fpga_alive_reg_2 #b0000))
(define-fun $e8 () Bool (= fpga_alive_reg_1 fpga_alive_reg_2))
(define-fun $e9 () Bool (= clk_3 clk_4))
(define-fun $e10 () Bool (and (= reset_3 reset_4) $e9))
(define-fun $e11 () Bool (= reset_3 #b1))
(define-fun $e12 () Bool (and (= clk_3 #b1) (not $e9)))
(define-fun $e13 () Bool (= state_fpga_alive_reg_3 #b0000))
(define-fun $e14 () Bool (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_3)))
(define-fun $e15 () Bool (= sel_fpga_alive_reg_3 #b1))
(define-fun $e16 () Bool (= state_fpga_alive_reg_2 state_fpga_alive_reg_3))
(define-fun $e17 () Bool (= state_fpga_alive_reg_3 #b0001))
(define-fun $e18 () Bool (= state_fpga_alive_reg_2 #b0010))
(define-fun $e19 () Bool (= state_fpga_alive_reg_3 #b0010))
(define-fun $e20 () Bool (= sfpga_alive_1 sfpga_alive_2))
(define-fun $e21 () Bool (= sfpga_alive_1 #b1))
(define-fun $e22 () Bool (= clk_4 clk_5))
(define-fun $e23 () Bool (and (= reset_4 reset_5) $e22))
(define-fun $e24 () Bool (= reset_4 #b1))
(define-fun $e25 () Bool (and (= clk_4 #b1) (not $e22)))
(define-fun $e26 () Bool (= state_fpga_alive_reg_4 #b0000))
(define-fun $e27 () Bool (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_4)))
(define-fun $e28 () Bool (= sel_fpga_alive_reg_4 #b1))
(define-fun $e29 () Bool (= fpga_alive_reg_3 fpga_alive_reg_4))
(define-fun $e30 () Bool (= fpga_alive_reg_written_2 fpga_alive_reg_written_3))
(define-fun $e31 () Bool (= s_clk_cnt_2 #b00000000000000000000000000000000))
(define-fun $e32 () Bool (= state_fpga_alive_gen_pulse_3 #b0000))
(define-fun $e33 () Bool (= state_fpga_alive_gen_pulse_3 #b0001))
(define-fun $e34 () Bool (= s_clk_cnt_2 s_clk_cnt_3))
(define-fun $e35 () Bool (= s_clk_cnt_default_2 #b00000000000000000000000000000000))
(define-fun $e36 () Bool (= s_clk_cnt_default_2 s_clk_cnt_default_3))
(define-fun $e37 () Bool (= state_fpga_alive_gen_pulse_3 #b0010))
(define-fun $e38 () Bool (bvult #b00000000000000010011100010000000 s_clk_cnt_default_3))
(define-fun $e39 () Bool (= state_fpga_alive_gen_pulse_2 #b0000))
(define-fun $e40 () Bool (= state_fpga_alive_gen_pulse_2 #b0001))
(define-fun $e41 () Bool (= sfpga_alive_1 #b0))
(define-fun $e42 () Bool (= state_fpga_alive_gen_pulse_2 #b0010))
(define-fun $e43 () Bool (= fpga_alive_reg_written_3 #b1))
(define-fun $e44 () Bool (= state_fpga_alive_gen_pulse_2 state_fpga_alive_gen_pulse_3))
(define-fun $e45 () Bool (= state_fpga_alive_reg_3 state_fpga_alive_reg_4))
(define-fun .f1 () Bool  (ite (not (and (= reset_1 reset_2) $e1)) (ite (= reset_1 #b1) (= fpga_rst_0 #b0) (ite (and (= clk_1 #b1) (not $e1)) (= fpga_rst_0 #b1) $e2)) $e2))
(define-fun .f2 () Bool (ite (not $e10) (ite $e11 $e7 (ite $e12 (ite $e13 (ite $e14 (ite $e15 (= state_fpga_alive_reg_2 #b0001) $e16) $e16) (ite $e17 $e18 (ite $e19 $e18 $e7))) $e16)) $e16))
(define-fun .f3 () Bool  (ite (not $e4) (ite $e5 (= fpga_alive_reg_1 #b0000000000000000) (ite $e6 (ite $e7 (ite (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_2)) (ite (= sel_fpga_alive_reg_2 #b1) (= fpga_alive_reg_1 data_in_2) $e8) $e8) $e8) $e8)) $e8))
(define-fun .f4 () Bool  (= fpga_alive_cnt_0 fpga_alive_reg_1))
(define-fun .f5 () Bool  (ite (not $e23) (ite $e24 $e13 (ite $e25 (ite $e26 (ite $e27 (ite $e28 $e17 $e45) $e45) (ite (= state_fpga_alive_reg_4 #b0001) $e19 (ite (= state_fpga_alive_reg_4 #b0010) $e19 $e13))) $e45)) $e45))
(define-fun .f6 () Bool  (ite (not $e10) (ite $e11 $e39 (ite $e12 (ite $e32 (ite $e43 $e40 $e42) (ite $e33 $e40 (ite $e37 (ite (not $e38) $e42 (ite $e43 $e39 $e44)) $e39))) $e44)) $e44))
(define-fun .f7 () Bool  (ite (not $e4) (ite $e5 $e21 (ite $e6 (ite $e39 $e21 (ite $e40 (ite (bvult #b00000000000000000001000100010001 s_clk_cnt_2) $e41 $e21) (ite $e42 (ite (not (bvult #b00000000000000010011100010000000 s_clk_cnt_default_2)) $e41 $e21) $e20))) $e20)) $e20))
(define-fun .f8 () Bool  (ite (not $e10) (ite $e11 $e35 (ite $e12 (ite $e32 $e35 (ite $e33 $e36 (ite $e37 (ite (not $e38) $e35 (= s_clk_cnt_default_2 (bvadd s_clk_cnt_default_3 #b00000000000000000000000000000001))) $e36))) $e36)) $e36))
(define-fun .f9 () Bool  (ite (not $e10) (ite $e11 $e31 (ite $e12 (ite $e32 $e31 (ite $e33 (ite (bvult #b00000000000000000001000100010001 s_clk_cnt_3) $e31 (= s_clk_cnt_2 (bvadd s_clk_cnt_3 #b00000000000000000000000000000001))) $e34)) $e34)) $e34))
(define-fun .f10 () Bool  (ite (not $e10) (ite $e11 (= fpga_alive_reg_written_2 #b0) (ite $e12 (ite $e13 (ite $e14 (ite $e15 (= fpga_alive_reg_written_2 #b1) $e30) $e30) $e30) $e30)) $e30))
(define-fun .f11 () Bool  (ite (not $e23) (ite $e24 (= fpga_alive_reg_3 #b0000000000000000) (ite $e25 (ite $e26 (ite $e27 (ite $e28 (= fpga_alive_reg_3 data_in_4) $e29) $e29) $e29) $e29)) $e29))
(define-fun .f12 () Bool  (ite (not (and (= fpga_alive_dis_1 fpga_alive_dis_2) $e20)) (ite (and $e21 (= fpga_alive_dis_1 #b0)) (= fpga_alive_pulse_0 #b1) (= fpga_alive_pulse_0 #b0)) (= fpga_alive_pulse_0 fpga_alive_pulse_1)))
(assert (! .f1 :interpolation-group .g0))
(assert (! .f2 :interpolation-group .g0))
(assert (! .f3 :interpolation-group .g0))
(assert (! .f4 :interpolation-group .g0))
(assert (! .f5 :interpolation-group .g0))
(assert (! .f6 :interpolation-group .g0))
(assert (! .f7 :interpolation-group .g0))
(assert (! .f8 :interpolation-group .g0))
(assert (! .f9 :interpolation-group .g0))
(assert (! .f10 :interpolation-group .g0))
(assert (! .f11 :interpolation-group .g0))
(assert (! .f12 :interpolation-group .g0))


(define-fun $f1 () Bool (= (bvadd clk_1 clk_2) #b0))
(define-fun $f2 () Bool (= (bvadd fpga_rst_0 fpga_rst_1) #b0))
(define-fun $f3 () Bool (and $f2 $f1))
(define-fun $f4 () Bool (= reset_3 #b1))
(define-fun $f5 () Bool (and $f4 $f3))
(define-fun $f6 () Bool (= (bvadd fpga_alive_dis_1 fpga_alive_dis_2) #b0))
(define-fun $f7 () Bool (= (bvadd fpga_alive_pulse_0 fpga_alive_pulse_1) #b0))
(define-fun $f8 () Bool (and $f6 $f5 $f7))
(define-fun $f9 () Bool (= (bvadd clk_4 clk_5) #b0))
(define-fun $f10 () Bool (= (bvadd reset_4 reset_5) #b0))
(define-fun $f11 () Bool (= (bvadd reset_1 reset_2) #b0))
(define-fun $f12 () Bool (and $f9 $f8 $f10 $f11))
(define-fun $f13 () Bool (= (bvadd reset_3 reset_4) #b0))
(define-fun $f14 () Bool (= reset_2 #b1))
(define-fun $f15 () Bool (= clk_2 #b1))
(define-fun $f16 () Bool (= (bvadd reset_2 reset_3) #b0))
(define-fun $f17 () Bool (= (bvadd clk_2 clk_3) #b0))
(define-fun $f18 () Bool (and $f17 $f3))
(define-fun $f19 () Bool (and $f16 $f18 $f4 $f6 $f7))
(define-fun $f20 () Bool (and $f9 $f19))
(define-fun $f21 () Bool (and $f10 $f20))
(define-fun $f22 () Bool (and $f11 $f21))
(define-fun $f23 () Bool (= (bvadd clk_3 clk_4) #b0))
(define-fun $f24 () Bool (= reset_1 #b1))
(define-fun $f25 () Bool (= fpga_rst_0 #b0))
(define-fun $f26 () Bool (and $f25 $f24))
(define-fun $f27 () Bool (and $f17 $f26))
(define-fun $f28 () Bool (and $f16 $f27 $f4 $f6 $f7))
(define-fun $f29 () Bool (= reset_4 #b1))
(define-fun $f30 () Bool (and $f29 $f19))
(define-fun $f31 () Bool (and $f11 $f30 (not $f23)))
(define-fun $f32 () Bool (and $f29 $f28 (not $f23) (not $f1)))
(define-fun $f33 () Bool (and $f17 $f2))
(define-fun $f34 () Bool (and $f16 $f33 $f4 $f6 $f7))
(define-fun $f35 () Bool (and $f29 $f34 (not $f23)))
(define-fun $f36 () Bool (= clk_1 #b1))
(define-fun $f37 () Bool (and $f9 $f34))
(define-fun $f38 () Bool (and (not $f23) $f30))
(define-fun $f39 () Bool (and (not $f13) $f28 (not $f1)))
(define-fun $f40 () Bool (= clk_4 #b1))
(define-fun $f41 () Bool (and (not $f13) $f34))
(define-fun $f42 () Bool (and (not $f13) $f19))
(define-fun $f43 () Bool (= fpga_rst_0 #b1))
(define-fun $f44 () Bool (and $f36 $f43))
(define-fun $f45 () Bool (and $f17 $f44 $f16 $f4 $f6 $f7))
(define-fun $f46 () Bool (and $f29 $f45 (not $f23) (not $f1)))
(define-fun $f47 () Bool (and $f11 $f19 (not $f13)))
(define-fun $f48 () Bool (and $f4 $f27 $f6 $f7))
(define-fun $f49 () Bool (and $f29 $f48 (not $f14) (not $f16) (not $f23)))
(define-fun $f50 () Bool (and $f4 $f26 $f6 $f7))
(define-fun $f51 () Bool (and $f29 $f50 (not $f14) (not $f15) (not $f16) (not $f23)))
(define-fun $f52 () Bool (and (not $f13) $f48 (not $f14) (not $f16)))
(define-fun $f53 () Bool (and (not $f13) $f50 (not $f14) (not $f15) (not $f16)))
(define-fun $f54 () Bool (and $f9 $f50 $f10))
(define-fun $f55 () Bool (and $f9 $f48 $f10))
(define-fun $f56 () Bool (and $f4 $f44))
(define-fun $f57 () Bool (and $f6 $f56 $f7))
(define-fun $f58 () Bool (and (not $f13) $f57 (not $f14) (not $f15) (not $f16) (not $f1)))
(define-fun $f59 () Bool (and $f29 $f57 (not $f14) (not $f15) (not $f16) (not $f23) (not $f1)))
(define-fun $f60 () Bool (and $f29 $f8 $f11 (not $f14) (not $f15) (not $f16) (not $f23)))
(define-fun $f61 () Bool (and $f4 $f33))
(define-fun $f62 () Bool (and $f6 $f61 $f7))
(define-fun $f63 () Bool (and $f29 $f62 (not $f14) (not $f16) (not $f23) (not $f1)))
(define-fun $f64 () Bool (and $f4 $f18))
(define-fun $f65 () Bool (and $f6 $f64 $f7))
(define-fun $f66 () Bool (and $f29 $f65 $f11 (not $f14) (not $f16) (not $f23)))
(define-fun $f67 () Bool (and (not $f13) $f62 (not $f14) (not $f16) (not $f1)))
(define-fun $f68 () Bool (and $f11 $f65 (not $f13) (not $f14) (not $f16)))
(define-fun $f69 () Bool (and $f11 $f8 (not $f13) (not $f14) (not $f15) (not $f16)))
(define-fun $f70 () Bool (= fpga_alive_pulse_0 #b0))
(define-fun $f71 () Bool (and $f70 $f56))
(define-fun $f72 () Bool (and $f29 $f71 (not $f14) (not $f15) (not $f16) (not $f23) (not $f1)))
(define-fun $f73 () Bool (and (not $f9) $f72 (not $f24) (not $f6)))
(define-fun $f74 () Bool (= fpga_alive_dis_1 #b0))
(define-fun $f75 () Bool (= fpga_alive_pulse_0 #b1))
(define-fun $f76 () Bool (and $f74 $f56 $f75))
(define-fun $f77 () Bool (and $f29 $f76 (not $f14) (not $f15) (not $f16) (not $f23) (not $f1)))
(define-fun $f78 () Bool (and $f14 $f3))
(define-fun $f79 () Bool (and $f4 $f78))
(define-fun $f80 () Bool (and $f74 $f79 $f75))
(define-fun $f81 () Bool (and $f11 $f80 (not $f13)))
(define-fun $f82 () Bool (= fpga_alive_cnt_0 #b0000000000000000))
(define-fun $f83 () Bool (and $f74 $f5 $f75))
(define-fun $f84 () Bool (and $f70 $f5))
(define-fun $f85 () Bool (and $f74 $f64 $f75))
(define-fun $f86 () Bool (and $f70 $f79))
(define-fun $f87 () Bool (and $f14 $f26 $f4))
(define-fun $f88 () Bool (and $f74 $f87 $f75 (not $f13) (not $f1) (not $f9) (not $f29) (not $f40)))
(define-fun $f89 () Bool (and $f29 $f80 $f11 (not $f23) (not $f9)))
(define-fun $f90 () Bool (= (bvadd data_in_2 (bvmul #b1111111111111111 fpga_alive_cnt_0)) #b0000000000000000))
(define-fun $f91 () Bool (ite $f7 $f90 false))
(define-fun $f92 () Bool (ite $f70 $f90 $f91))
(define-fun $f93 () Bool (ite $f70 $f90 false))
(define-fun $f94 () Bool (ite $f6 (ite $f74 (ite $f75 $f90 $f92) $f92) (ite $f74 (ite $f75 $f90 $f93) $f93)))
(define-fun $f95 () Bool (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_2)))
(define-fun $f96 () Bool (and $f1 $f95 $f2 $f15))
(define-fun $f97 () Bool (= sel_fpga_alive_reg_2 #b1))
(define-fun $f98 () Bool (and $f97 $f96))
(define-fun $f99 () Bool (= clk_3 #b1))
(define-fun $f100 () Bool (ite $f6 (ite $f74 (ite $f75 $f90 $f91) $f92) (ite $f74 (ite $f75 $f90 false) $f93)))
(define-fun $f101 () Bool (ite $f70 true $f7))
(define-fun $f102 () Bool (ite $f74 (ite $f75 true $f70) $f70))
(define-fun $f103 () Bool (ite $f6 (ite $f74 (ite $f75 true $f101) $f101) $f102))
(define-fun $f104 () Bool (ite $f6 (ite $f74 (ite $f75 true $f7) $f101) (ite $f74 $f75 $f70)))
(define-fun $f105 () Bool (ite $f4 $f104 $f103))
(define-fun $f106 () Bool (ite $f13 $f103 $f105))
(define-fun $f107 () Bool (bvult #b0000000000000100 (bvmul #b0000000000000010 data_in_3)))
(define-fun $f108 () Bool (= sel_fpga_alive_reg_3 #b1))
(define-fun $f109 () Bool (ite $f10 true (not $f29)))
(define-fun $f110 () Bool (ite $f9 $f109 (ite $f29 false (not $f40))))
(define-fun $f111 () Bool (ite $f70 $f110 (ite $f7 $f110 false)))
(define-fun $f112 () Bool (ite $f70 $f110 false))
(define-fun $f113 () Bool (ite $f23 $f106 (ite $f4 $f104 (ite $f99 (ite $f107 (ite $f108 (ite $f6 (ite $f74 (ite $f75 $f110 $f111) $f111) (ite $f74 (ite $f75 $f110 $f112) $f112)) $f103) $f103) $f103))))
(define-fun $f114 () Bool (and $f15 $f3 $f11))
(define-fun $f115 () Bool (ite $f9 $f109 (not $f29)))
(define-fun $f116 () Bool (ite $f70 $f115 (ite $f7 $f115 false)))
(define-fun $f117 () Bool (ite $f70 $f115 false))
(define-fun $f118 () Bool (ite $f6 (ite $f74 (ite $f75 $f115 $f116) $f116) (ite $f74 (ite $f75 $f115 $f117) $f117)))
(define-fun $f119 () Bool (ite $f6 $f7 $f102))
(define-fun $f120 () Bool (ite $f82 $f104 false))
(define-fun $f121 () Bool (ite $f16 $f119 (ite $f14 $f120 $f119)))
(define-fun $f122 () Bool (ite $f29 $f90 true))
(define-fun $f123 () Bool (ite $f9 (ite $f10 true $f122) $f122))
(define-fun $f124 () Bool (ite $f70 $f123 (ite $f7 $f123 false)))
(define-fun $f125 () Bool (ite $f70 $f123 false))
(define-fun $f126 () Bool (ite $f6 (ite $f74 (ite $f75 $f123 $f124) $f124) (ite $f74 (ite $f75 $f123 $f125) $f125)))
(define-fun $f127 () Bool (ite $f23 $f106 $f105))
(define-fun $f128 () Bool (ite $f17 $f121 (ite $f14 $f120 (ite $f15 (ite $f95 (ite $f97 (ite $f23 (ite $f13 $f126 (ite $f4 $f100 $f126)) (ite $f4 $f100 (ite $f99 (ite $f107 (ite $f108 $f103 $f126) $f126) $f126))) $f127) $f127) $f119))))
(define-fun $f129 () Bool (ite $f25 $f128 false))
(define-fun $f130 () Bool (ite $f2 $f128 false))
(define-fun .f13 () Bool   (not (not (and (not (and (not $f13) $f12 (not $f14) (not $f15) (not $f16))) (not (and (not $f13) $f22)) (not (and (not $f23) $f22)) (not (and $f9 $f28 $f10 (not $f23) (not $f1))) (not (and (not $f9) $f31)) (not (and (not $f9) $f32)) (not (and (not $f10) $f32)) (not (and (not $f10) $f31)) (not (and (not $f10) $f35 (not $f36) (not $f24) (not $f11))) (not (and $f10 $f37 (not $f23) (not $f36) (not $f24) (not $f11))) (not (and (not $f9) $f35 (not $f36) (not $f24) (not $f11))) (not (and (not $f23) $f21 (not $f24) (not $f11))) (not (and (not $f10) $f38 (not $f24) (not $f11))) (not (and (not $f9) $f38 (not $f24) (not $f11))) (not (and (not $f9) $f39 (not $f29) (not $f40))) (not (and (not $f9) $f41 (not $f36) (not $f24) (not $f11) (not $f29) (not $f40))) (not (and (not $f10) $f39 (not $f29) (not $f40))) (not (and (not $f10) $f41 (not $f36) (not $f24) (not $f11) (not $f29) (not $f40))) (not (and (not $f10) $f42 (not $f24) (not $f11) (not $f29) (not $f40))) (not (and (not $f9) $f42 (not $f24) (not $f11) (not $f29) (not $f40))) (not (and (not $f10) $f46 (not $f24) (not $f11))) (not (and (not $f10) $f47 (not $f29) (not $f40))) (not (and (not $f9) $f47 (not $f29) (not $f40))) (not (and (not $f9) $f49 (not $f11))) (not (and $f9 $f45 $f10 (not $f23) (not $f1) (not $f24) (not $f11))) (not (and (not $f10) $f51 (not $f11))) (not (and (not $f9) $f51 (not $f11))) (not (and (not $f10) $f52 (not $f11) (not $f29) (not $f40))) (not (and (not $f9) $f52 (not $f11) (not $f29) (not $f40))) (not (and (not $f10) $f53 (not $f11) (not $f29) (not $f40))) (not (and (not $f9) $f53 (not $f11) (not $f29) (not $f40))) (not (and (not $f13) $f54 (not $f14) (not $f15) (not $f16) (not $f11))) (not (and (not $f13) $f55 (not $f14) (not $f16) (not $f11))) (not (and (not $f10) $f49 (not $f11))) (not (and (not $f10) $f58 (not $f24) (not $f29) (not $f40))) (not (and (not $f9) $f58 (not $f24) (not $f29) (not $f40))) (not (and (not $f9) $f46 (not $f24) (not $f11))) (not (and (not $f14) $f55 (not $f16) (not $f23) (not $f11))) (not (and (not $f14) $f54 (not $f15) (not $f16) (not $f23) (not $f11))) (not (and (not $f14) $f12 (not $f15) (not $f16) (not $f23))) (not (and $f9 $f57 $f10 (not $f14) (not $f15) (not $f16) (not $f23) (not $f1) (not $f24))) (not (and (not $f10) $f59 (not $f24))) (not (and (not $f10) $f60)) (not (and (not $f10) $f63 (not $f36) (not $f24))) (not (and (not $f10) $f66)) (not (and $f9 $f62 $f10 (not $f14) (not $f16) (not $f23) (not $f1) (not $f36) (not $f24))) (not (and $f9 $f65 $f10 $f11 (not $f14) (not $f16) (not $f23))) (not (and (not $f10) $f67 (not $f36) (not $f24) (not $f29) (not $f40))) (not (and (not $f10) $f68 (not $f29) (not $f40))) (not (and (not $f10) $f69 (not $f29) (not $f40))) (not (and (not $f9) $f60)) (not (and (not $f9) $f59 (not $f24))) (not (and (not $f9) $f69 (not $f29) (not $f40))) (not (and (not $f9) $f63 (not $f36) (not $f24))) (not (and (not $f9) $f66)) (not (and (not $f9) $f67 (not $f36) (not $f24) (not $f29) (not $f40))) (not (and (not $f13) $f37 (not $f10) (not $f36) (not $f24) (not $f11) (not $f29))) (not (and (not $f9) $f68 (not $f29) (not $f40))) (not (and (not $f74) $f73)) (not (and (not $f9) $f77 (not $f24) (not $f6))) (not $f73) (not (and (not $f10) $f81 (not $f29) (not $f40) (not $f17) $f82)) (not (and $f29 $f83 $f11 (not $f14) (not $f15) (not $f16) (not $f23) (not $f9) (not $f6))) (not (and $f29 $f84 $f11 (not $f14) (not $f15) (not $f16) (not $f23) (not $f9) (not $f6))) (not (and $f11 $f83 (not $f13) (not $f14) (not $f15) (not $f16) (not $f9) (not $f29) (not $f40) (not $f6))) (not (and $f11 $f84 (not $f13) (not $f14) (not $f15) (not $f16) (not $f9) (not $f29) (not $f40) (not $f6))) (not (and (not $f13) $f76 (not $f14) (not $f15) (not $f16) (not $f1) (not $f9) (not $f24) (not $f29) (not $f40) (not $f6))) (not (and (not $f13) $f71 (not $f14) (not $f15) (not $f16) (not $f1) (not $f9) (not $f24) (not $f29) (not $f40) (not $f6))) (not (and $f11 $f85 (not $f13) (not $f14) (not $f16) (not $f9) (not $f29) (not $f40) (not $f6))) (not (and $f70 $f64 $f11 (not $f13) (not $f14) (not $f16) (not $f9) (not $f29) (not $f40) (not $f6))) (not (and (not $f9) $f81 (not $f29) (not $f40) (not $f6) (not $f17) $f82)) (not (and $f74 $f61 $f75 (not $f13) (not $f14) (not $f16) (not $f1) (not $f9) (not $f36) (not $f24) (not $f29) (not $f40) (not $f6))) (not (and (not $f13) $f20 (not $f10) (not $f24) (not $f11) (not $f29))) (not (and (not $f10) $f72 (not $f24) (not $f6) (not $f74))) (not (and $f11 $f86 (not $f13) (not $f9) (not $f29) (not $f40) (not $f6) (not $f74) (not $f17) $f82)) (not (and (not $f10) $f77 (not $f24) (not $f6))) (not (and $f6 $f79 $f7 $f11 (not $f13) (not $f9) (not $f29) (not $f40) (not $f17) $f82)) (not (and $f70 $f87 (not $f13) (not $f1) (not $f9) (not $f29) (not $f40) (not $f6) (not $f74) (not $f17) $f82)) (not (and (not $f6) $f88 (not $f17) $f82)) (not (and $f70 $f61 (not $f13) (not $f14) (not $f16) (not $f1) (not $f9) (not $f36) (not $f24) (not $f29) (not $f40) (not $f6))) (not (and (not $f6) $f89 (not $f17) $f82)) (not (and $f29 $f86 $f11 (not $f23) (not $f9) (not $f6) (not $f74) (not $f17) $f82)) (not (and (not $f17) $f89 $f82)) (not (and $f29 $f85 $f11 (not $f14) (not $f16) (not $f23) (not $f9) (not $f6))) (not (and $f6 $f87 $f7 (not $f13) (not $f1) (not $f9) (not $f29) (not $f40) (not $f17) $f82)) (not (and $f9 $f76 $f10 (not $f14) (not $f15) (not $f16) (not $f23) (not $f1) (not $f24) (not $f6))) (not (and (not $f17) $f88 $f82)) (not (and $f9 $f84 $f10 $f11 (not $f13) (not $f14) (not $f15) (not $f16) (not $f6) (not $f74))) (not (and (not $f13) $f21 (not $f24) (not $f11))) (not (and $f9 $f83 $f10 $f11 (not $f13) (not $f14) (not $f15) (not $f16) (not $f6))) (not (and $f11 $f98 (not $f14) (not $f23) (not $f17) (not $f4) (not $f99) $f94)) (not (and $f4 $f98 $f11 (not $f14) (not $f23) (not $f17) $f100)) (not (and $f23 $f98 $f11 (not $f14) (not $f17) (ite $f13 $f94 (ite $f4 $f100 $f94)))) (not (and $f11 $f96 (not $f14) (not $f17) (not $f97) $f113)) (not (and (not $f95) $f114 (not $f14) (not $f17) $f113)) (not (and (not $f14) $f114 (not $f17) (ite $f23 (ite $f13 $f118 (ite $f4 false $f118)) (ite $f4 false (ite $f99 (ite $f107 (ite $f108 $f103 $f118) $f118) $f118))))) (not (and $f11 $f3 (not $f14) (not $f15) (not $f17) $f119)) (not (and $f11 $f78 (not $f17) $f120)) (not (and $f11 $f18 $f121)) (not (and (not $f11) $f1 (ite $f24 $f129 $f130))) (not (and (not $f1) (ite $f24 $f129 (ite $f36 (ite $f43 $f128 false) $f130)))) true))))
(assert (! .f13 :interpolation-group .g1))

(declare-fun next_data_in_2 () (_ BitVec 16))
(declare-fun next_data_in_3 () (_ BitVec 16))
(declare-fun next_data_in_4 () (_ BitVec 16))
(declare-fun next_fpga_alive_cnt_0 () (_ BitVec 16))
(declare-fun next_fpga_alive_dis_1 () (_ BitVec 1))
(declare-fun next_fpga_alive_dis_2 () (_ BitVec 1))
(declare-fun next_fpga_alive_pulse_1 () (_ BitVec 1))
(declare-fun next_fpga_alive_pulse_0 () (_ BitVec 1))
(declare-fun next_state_fpga_alive_gen_pulse_2 () (_ BitVec 4))
(declare-fun next_state_fpga_alive_gen_pulse_3 () (_ BitVec 4))
(define-fun .f14 () Bool    (not (and (= fpga_alive_dis_2 next_fpga_alive_dis_2) (= fpga_alive_dis_1 next_fpga_alive_dis_1) (= fpga_alive_pulse_1 next_fpga_alive_pulse_1) (= fpga_alive_pulse_0 next_fpga_alive_pulse_0))))
(define-fun .f15 () Bool    (not (bvult next_fpga_alive_cnt_0 fpga_alive_cnt_0)))
(define-fun .f16 () Bool    (bvult (bvadd next_state_fpga_alive_gen_pulse_2 next_state_fpga_alive_gen_pulse_3) (bvadd state_fpga_alive_gen_pulse_2 state_fpga_alive_gen_pulse_3)))
(define-fun .f17 () Bool    (bvult (bvadd (bvadd next_data_in_4 next_data_in_2) next_data_in_3) (bvadd (bvadd data_in_4 data_in_2) data_in_3)))
(assert (! .f14 :interpolation-group .g1))
(assert (! .f15 :interpolation-group .g1))
(assert (! .f16 :interpolation-group .g1))
(assert (! .f17 :interpolation-group .g1))

(check-sat)
(get-interpolant (.g0))
